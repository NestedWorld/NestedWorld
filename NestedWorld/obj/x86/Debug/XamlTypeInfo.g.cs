//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace NestedWorld
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace NestedWorld.NestedWorld_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[45];
            _typeNameTable[0] = "Windows.UI.Color";
            _typeNameTable[1] = "System.ValueType";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Byte";
            _typeNameTable[4] = "NestedWorld.View.PopUpView.RegisterView";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[6] = "NestedWorld.MainPage";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[8] = "NestedWorld.View.BattleViews.StartBattleAnnimation";
            _typeNameTable[9] = "NestedWorld.Pages.BattlePage";
            _typeNameTable[10] = "NestedWorld.Style.TabHeader";
            _typeNameTable[11] = "String";
            _typeNameTable[12] = "NestedWorld.View.MonsterListView";
            _typeNameTable[13] = "NestedWorld.Classes.ElementsGame.Monsters.MonsterList";
            _typeNameTable[14] = "NestedWorld.View.MonsterViews.MonsterFullView";
            _typeNameTable[15] = "NestedWorld.Classes.ElementsGame.Monsters.UserMonster";
            _typeNameTable[16] = "NestedWorld.Classes.ElementsGame.Monsters.Monster";
            _typeNameTable[17] = "NestedWorld.View.MapView";
            _typeNameTable[18] = "NestedWorld.View.GardenView";
            _typeNameTable[19] = "Int32";
            _typeNameTable[20] = "NestedWorld.View.HomeView";
            _typeNameTable[21] = "NestedWorld.View.MonsterView";
            _typeNameTable[22] = "NestedWorld.View.UserView";
            _typeNameTable[23] = "NestedWorld.Classes.ElementsGame.Users.UserList";
            _typeNameTable[24] = "NestedWorld.Pages.HomePage";
            _typeNameTable[25] = "NestedWorld.Pages.MonsterPage";
            _typeNameTable[26] = "NestedWorld.View.PrepareBattleViews.MonsterForBattleView";
            _typeNameTable[27] = "NestedWorld.View.PrepareBattleViews.MonsterView";
            _typeNameTable[28] = "NestedWorld.Pages.PrepareBattlePage";
            _typeNameTable[29] = "NestedWorld.Style.TabHeaderMap";
            _typeNameTable[30] = "NestedWorld.View.NotificationView";
            _typeNameTable[31] = "Windows.UI.Xaml.Input.TappedEventHandler";
            _typeNameTable[32] = "NestedWorld.View.MapViews.MapPoint";
            _typeNameTable[33] = "NestedWorld.View.MonsterViews.MonsterView";
            _typeNameTable[34] = "NestedWorld.View.MonsterSoloView";
            _typeNameTable[35] = "NestedWorld.Classes.ElementsGame.TypeEnum";
            _typeNameTable[36] = "System.Enum";
            _typeNameTable[37] = "NestedWorld.View.MonsterViews.MonsterAttackView";
            _typeNameTable[38] = "NestedWorld.View.MonsterViews.MonsterAttacksView";
            _typeNameTable[39] = "NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList";
            _typeNameTable[40] = "NestedWorld.View.MonsterViews.MonsterHeaderView";
            _typeNameTable[41] = "NestedWorld.View.MonsterViews.MonsterStatsView";
            _typeNameTable[42] = "NestedWorld.View.MonsterViews.MonsterLocationView";
            _typeNameTable[43] = "NestedWorld.View.StatsView";
            _typeNameTable[44] = "NestedWorld.View.UserViews.AllyView";

            _typeTable = new global::System.Type[45];
            _typeTable[0] = typeof(global::Windows.UI.Color);
            _typeTable[1] = typeof(global::System.ValueType);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Byte);
            _typeTable[4] = typeof(global::NestedWorld.View.PopUpView.RegisterView);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[6] = typeof(global::NestedWorld.MainPage);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[8] = typeof(global::NestedWorld.View.BattleViews.StartBattleAnnimation);
            _typeTable[9] = typeof(global::NestedWorld.Pages.BattlePage);
            _typeTable[10] = typeof(global::NestedWorld.Style.TabHeader);
            _typeTable[11] = typeof(global::System.String);
            _typeTable[12] = typeof(global::NestedWorld.View.MonsterListView);
            _typeTable[13] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList);
            _typeTable[14] = typeof(global::NestedWorld.View.MonsterViews.MonsterFullView);
            _typeTable[15] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster);
            _typeTable[16] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.Monster);
            _typeTable[17] = typeof(global::NestedWorld.View.MapView);
            _typeTable[18] = typeof(global::NestedWorld.View.GardenView);
            _typeTable[19] = typeof(global::System.Int32);
            _typeTable[20] = typeof(global::NestedWorld.View.HomeView);
            _typeTable[21] = typeof(global::NestedWorld.View.MonsterView);
            _typeTable[22] = typeof(global::NestedWorld.View.UserView);
            _typeTable[23] = typeof(global::NestedWorld.Classes.ElementsGame.Users.UserList);
            _typeTable[24] = typeof(global::NestedWorld.Pages.HomePage);
            _typeTable[25] = typeof(global::NestedWorld.Pages.MonsterPage);
            _typeTable[26] = typeof(global::NestedWorld.View.PrepareBattleViews.MonsterForBattleView);
            _typeTable[27] = typeof(global::NestedWorld.View.PrepareBattleViews.MonsterView);
            _typeTable[28] = typeof(global::NestedWorld.Pages.PrepareBattlePage);
            _typeTable[29] = typeof(global::NestedWorld.Style.TabHeaderMap);
            _typeTable[30] = typeof(global::NestedWorld.View.NotificationView);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Input.TappedEventHandler);
            _typeTable[32] = typeof(global::NestedWorld.View.MapViews.MapPoint);
            _typeTable[33] = typeof(global::NestedWorld.View.MonsterViews.MonsterView);
            _typeTable[34] = typeof(global::NestedWorld.View.MonsterSoloView);
            _typeTable[35] = typeof(global::NestedWorld.Classes.ElementsGame.TypeEnum);
            _typeTable[36] = typeof(global::System.Enum);
            _typeTable[37] = typeof(global::NestedWorld.View.MonsterViews.MonsterAttackView);
            _typeTable[38] = typeof(global::NestedWorld.View.MonsterViews.MonsterAttacksView);
            _typeTable[39] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList);
            _typeTable[40] = typeof(global::NestedWorld.View.MonsterViews.MonsterHeaderView);
            _typeTable[41] = typeof(global::NestedWorld.View.MonsterViews.MonsterStatsView);
            _typeTable[42] = typeof(global::NestedWorld.View.MonsterViews.MonsterLocationView);
            _typeTable[43] = typeof(global::NestedWorld.View.StatsView);
            _typeTable[44] = typeof(global::NestedWorld.View.UserViews.AllyView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_4_RegisterView() { return new global::NestedWorld.View.PopUpView.RegisterView(); }
        private object Activate_6_MainPage() { return new global::NestedWorld.MainPage(); }
        private object Activate_8_StartBattleAnnimation() { return new global::NestedWorld.View.BattleViews.StartBattleAnnimation(); }
        private object Activate_9_BattlePage() { return new global::NestedWorld.Pages.BattlePage(); }
        private object Activate_10_TabHeader() { return new global::NestedWorld.Style.TabHeader(); }
        private object Activate_12_MonsterListView() { return new global::NestedWorld.View.MonsterListView(); }
        private object Activate_13_MonsterList() { return new global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList(); }
        private object Activate_14_MonsterFullView() { return new global::NestedWorld.View.MonsterViews.MonsterFullView(); }
        private object Activate_17_MapView() { return new global::NestedWorld.View.MapView(); }
        private object Activate_18_GardenView() { return new global::NestedWorld.View.GardenView(); }
        private object Activate_20_HomeView() { return new global::NestedWorld.View.HomeView(); }
        private object Activate_21_MonsterView() { return new global::NestedWorld.View.MonsterView(); }
        private object Activate_22_UserView() { return new global::NestedWorld.View.UserView(); }
        private object Activate_23_UserList() { return new global::NestedWorld.Classes.ElementsGame.Users.UserList(); }
        private object Activate_24_HomePage() { return new global::NestedWorld.Pages.HomePage(); }
        private object Activate_25_MonsterPage() { return new global::NestedWorld.Pages.MonsterPage(); }
        private object Activate_26_MonsterForBattleView() { return new global::NestedWorld.View.PrepareBattleViews.MonsterForBattleView(); }
        private object Activate_27_MonsterView() { return new global::NestedWorld.View.PrepareBattleViews.MonsterView(); }
        private object Activate_28_PrepareBattlePage() { return new global::NestedWorld.Pages.PrepareBattlePage(); }
        private object Activate_29_TabHeaderMap() { return new global::NestedWorld.Style.TabHeaderMap(); }
        private object Activate_30_NotificationView() { return new global::NestedWorld.View.NotificationView(); }
        private object Activate_32_MapPoint() { return new global::NestedWorld.View.MapViews.MapPoint(); }
        private object Activate_33_MonsterView() { return new global::NestedWorld.View.MonsterViews.MonsterView(); }
        private object Activate_34_MonsterSoloView() { return new global::NestedWorld.View.MonsterSoloView(); }
        private object Activate_37_MonsterAttackView() { return new global::NestedWorld.View.MonsterViews.MonsterAttackView(); }
        private object Activate_38_MonsterAttacksView() { return new global::NestedWorld.View.MonsterViews.MonsterAttacksView(); }
        private object Activate_39_MonsterAttckList() { return new global::NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList(); }
        private object Activate_40_MonsterHeaderView() { return new global::NestedWorld.View.MonsterViews.MonsterHeaderView(); }
        private object Activate_41_MonsterStatsView() { return new global::NestedWorld.View.MonsterViews.MonsterStatsView(); }
        private object Activate_42_MonsterLocationView() { return new global::NestedWorld.View.MonsterViews.MonsterLocationView(); }
        private object Activate_43_StatsView() { return new global::NestedWorld.View.StatsView(); }
        private object Activate_44_AllyView() { return new global::NestedWorld.View.UserViews.AllyView(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Windows.UI.Color
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 1:   //  System.ValueType
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 2:   //  Object
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Byte
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  NestedWorld.View.PopUpView.RegisterView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_RegisterView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  NestedWorld.MainPage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  NestedWorld.View.BattleViews.StartBattleAnnimation
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_8_StartBattleAnnimation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  NestedWorld.Pages.BattlePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_BattlePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  NestedWorld.Style.TabHeader
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_10_TabHeader;
                userType.AddMemberName("Glyph");
                userType.AddMemberName("Label");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  String
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  NestedWorld.View.MonsterListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_MonsterListView;
                userType.AddMemberName("monsterList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  NestedWorld.Classes.ElementsGame.Monsters.MonsterList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  NestedWorld.View.MonsterViews.MonsterFullView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_14_MonsterFullView;
                userType.AddMemberName("monsterToDisplay");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  NestedWorld.Classes.ElementsGame.Monsters.UserMonster
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("NestedWorld.Classes.ElementsGame.Monsters.Monster"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  NestedWorld.Classes.ElementsGame.Monsters.Monster
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  NestedWorld.View.MapView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_MapView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  NestedWorld.View.GardenView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_GardenView;
                userType.AddMemberName("elipseNumber");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Int32
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  NestedWorld.View.HomeView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_HomeView;
                userType.AddMemberName("UserImage");
                userType.AddMemberName("BackgroundImage");
                userType.AddMemberName("UserName");
                userType.AddMemberName("userLevel");
                userType.AddMemberName("MonsterCaptured");
                userType.AddMemberName("AreaCaptured");
                userType.AddMemberName("AllyOnline");
                userType.AddMemberName("MonsterSee");
                userType.AddMemberName("UserLevel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  NestedWorld.View.MonsterView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_MonsterView;
                userType.AddMemberName("monsterList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  NestedWorld.View.UserView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_22_UserView;
                userType.AddMemberName("userList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  NestedWorld.Classes.ElementsGame.Users.UserList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  NestedWorld.Pages.HomePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_HomePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  NestedWorld.Pages.MonsterPage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_MonsterPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  NestedWorld.View.PrepareBattleViews.MonsterForBattleView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_26_MonsterForBattleView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  NestedWorld.View.PrepareBattleViews.MonsterView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_MonsterView;
                userType.AddMemberName("monsterList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  NestedWorld.Pages.PrepareBattlePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_PrepareBattlePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  NestedWorld.Style.TabHeaderMap
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_29_TabHeaderMap;
                userType.AddMemberName("Glyph");
                userType.AddMemberName("Label");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  NestedWorld.View.NotificationView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_30_NotificationView;
                userType.AddMemberName("NotificationNumber");
                userType.AddMemberName("Tap");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Input.TappedEventHandler
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  NestedWorld.View.MapViews.MapPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_32_MapPoint;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  NestedWorld.View.MonsterViews.MonsterView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_33_MonsterView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  NestedWorld.View.MonsterSoloView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_34_MonsterSoloView;
                userType.AddMemberName("MonsterName");
                userType.AddMemberName("Level");
                userType.AddMemberName("MonsterImage");
                userType.AddMemberName("Type");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("userMonster");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  NestedWorld.Classes.ElementsGame.TypeEnum
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("FIRE", global::NestedWorld.Classes.ElementsGame.TypeEnum.FIRE);
                userType.AddEnumValue("WATHER", global::NestedWorld.Classes.ElementsGame.TypeEnum.WATHER);
                userType.AddEnumValue("GRASS", global::NestedWorld.Classes.ElementsGame.TypeEnum.GRASS);
                userType.AddEnumValue("DIRT", global::NestedWorld.Classes.ElementsGame.TypeEnum.DIRT);
                userType.AddEnumValue("ELEC", global::NestedWorld.Classes.ElementsGame.TypeEnum.ELEC);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  System.Enum
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 37:   //  NestedWorld.View.MonsterViews.MonsterAttackView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_37_MonsterAttackView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  NestedWorld.View.MonsterViews.MonsterAttacksView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_38_MonsterAttacksView;
                userType.AddMemberName("monsterAttackList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  NestedWorld.View.MonsterViews.MonsterHeaderView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_40_MonsterHeaderView;
                userType.AddMemberName("MonsterName");
                userType.AddMemberName("MonsterImage");
                userType.AddMemberName("MonsterType");
                userType.AddMemberName("MonsterCombat");
                userType.AddMemberName("MonsterLevel");
                userType.AddMemberName("MonsterVictory");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  NestedWorld.View.MonsterViews.MonsterStatsView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_MonsterStatsView;
                userType.AddMemberName("Life");
                userType.AddMemberName("Exp");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  NestedWorld.View.MonsterViews.MonsterLocationView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_42_MonsterLocationView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  NestedWorld.View.StatsView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_43_StatsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  NestedWorld.View.UserViews.AllyView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_44_AllyView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_TabHeader_Glyph(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            return that.Glyph;
        }
        private void set_4_TabHeader_Glyph(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            that.Glyph = (global::System.String)Value;
        }
        private object get_5_TabHeader_Label(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            return that.Label;
        }
        private void set_5_TabHeader_Label(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_6_MonsterListView_monsterList(object instance)
        {
            var that = (global::NestedWorld.View.MonsterListView)instance;
            return that.monsterList;
        }
        private void set_6_MonsterListView_monsterList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterListView)instance;
            that.monsterList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList)Value;
        }
        private object get_7_MonsterFullView_monsterToDisplay(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterFullView)instance;
            return that.monsterToDisplay;
        }
        private void set_7_MonsterFullView_monsterToDisplay(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterFullView)instance;
            that.monsterToDisplay = (global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster)Value;
        }
        private object get_8_GardenView_elipseNumber(object instance)
        {
            var that = (global::NestedWorld.View.GardenView)instance;
            return that.elipseNumber;
        }
        private void set_8_GardenView_elipseNumber(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenView)instance;
            that.elipseNumber = (global::System.Int32)Value;
        }
        private object get_9_HomeView_UserImage(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.UserImage;
        }
        private void set_9_HomeView_UserImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.UserImage = (global::System.String)Value;
        }
        private object get_10_HomeView_BackgroundImage(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.BackgroundImage;
        }
        private void set_10_HomeView_BackgroundImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.BackgroundImage = (global::System.String)Value;
        }
        private object get_11_HomeView_UserName(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.UserName;
        }
        private void set_11_HomeView_UserName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.UserName = (global::System.String)Value;
        }
        private object get_12_HomeView_userLevel(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.userLevel;
        }
        private void set_12_HomeView_userLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.userLevel = (global::System.String)Value;
        }
        private object get_13_HomeView_MonsterCaptured(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.MonsterCaptured;
        }
        private void set_13_HomeView_MonsterCaptured(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.MonsterCaptured = (global::System.Int32)Value;
        }
        private object get_14_HomeView_AreaCaptured(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.AreaCaptured;
        }
        private void set_14_HomeView_AreaCaptured(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.AreaCaptured = (global::System.Int32)Value;
        }
        private object get_15_HomeView_AllyOnline(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.AllyOnline;
        }
        private void set_15_HomeView_AllyOnline(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.AllyOnline = (global::System.Int32)Value;
        }
        private object get_16_HomeView_MonsterSee(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.MonsterSee;
        }
        private void set_16_HomeView_MonsterSee(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.MonsterSee = (global::System.Int32)Value;
        }
        private object get_17_HomeView_UserLevel(object instance)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            return that.UserLevel;
        }
        private void set_17_HomeView_UserLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.HomeView)instance;
            that.UserLevel = (global::System.Int32)Value;
        }
        private object get_18_MonsterView_monsterList(object instance)
        {
            var that = (global::NestedWorld.View.MonsterView)instance;
            return that.monsterList;
        }
        private void set_18_MonsterView_monsterList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterView)instance;
            that.monsterList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList)Value;
        }
        private object get_19_UserView_userList(object instance)
        {
            var that = (global::NestedWorld.View.UserView)instance;
            return that.userList;
        }
        private void set_19_UserView_userList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.UserView)instance;
            that.userList = (global::NestedWorld.Classes.ElementsGame.Users.UserList)Value;
        }
        private object get_20_MonsterView_monsterList(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleViews.MonsterView)instance;
            return that.monsterList;
        }
        private void set_20_MonsterView_monsterList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleViews.MonsterView)instance;
            that.monsterList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList)Value;
        }
        private object get_21_TabHeaderMap_Glyph(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeaderMap)instance;
            return that.Glyph;
        }
        private void set_21_TabHeaderMap_Glyph(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeaderMap)instance;
            that.Glyph = (global::System.String)Value;
        }
        private object get_22_TabHeaderMap_Label(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeaderMap)instance;
            return that.Label;
        }
        private void set_22_TabHeaderMap_Label(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeaderMap)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_23_NotificationView_NotificationNumber(object instance)
        {
            var that = (global::NestedWorld.View.NotificationView)instance;
            return that.NotificationNumber;
        }
        private void set_23_NotificationView_NotificationNumber(object instance, object Value)
        {
            var that = (global::NestedWorld.View.NotificationView)instance;
            that.NotificationNumber = (global::System.Int32)Value;
        }
        private object get_24_NotificationView_Tap(object instance)
        {
            var that = (global::NestedWorld.View.NotificationView)instance;
            return that.Tap;
        }
        private object get_25_MonsterSoloView_MonsterName(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.MonsterName;
        }
        private void set_25_MonsterSoloView_MonsterName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.MonsterName = (global::System.String)Value;
        }
        private object get_26_MonsterSoloView_Level(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.Level;
        }
        private void set_26_MonsterSoloView_Level(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.Level = (global::System.String)Value;
        }
        private object get_27_MonsterSoloView_MonsterImage(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.MonsterImage;
        }
        private void set_27_MonsterSoloView_MonsterImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.MonsterImage = (global::System.String)Value;
        }
        private object get_28_MonsterSoloView_Type(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.Type;
        }
        private void set_28_MonsterSoloView_Type(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.Type = (global::NestedWorld.Classes.ElementsGame.TypeEnum)Value;
        }
        private object get_29_MonsterSoloView_BackgroundColor(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.BackgroundColor;
        }
        private void set_29_MonsterSoloView_BackgroundColor(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.BackgroundColor = (global::System.String)Value;
        }
        private object get_30_MonsterSoloView_userMonster(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.userMonster;
        }
        private void set_30_MonsterSoloView_userMonster(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.userMonster = (global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster)Value;
        }
        private object get_31_MonsterAttacksView_monsterAttackList(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterAttacksView)instance;
            return that.monsterAttackList;
        }
        private void set_31_MonsterAttacksView_monsterAttackList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterAttacksView)instance;
            that.monsterAttackList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList)Value;
        }
        private object get_32_MonsterHeaderView_MonsterName(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterName;
        }
        private void set_32_MonsterHeaderView_MonsterName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterName = (global::System.String)Value;
        }
        private object get_33_MonsterHeaderView_MonsterImage(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterImage;
        }
        private void set_33_MonsterHeaderView_MonsterImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterImage = (global::System.String)Value;
        }
        private object get_34_MonsterHeaderView_MonsterType(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterType;
        }
        private void set_34_MonsterHeaderView_MonsterType(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterType = (global::NestedWorld.Classes.ElementsGame.TypeEnum)Value;
        }
        private object get_35_MonsterHeaderView_MonsterCombat(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterCombat;
        }
        private void set_35_MonsterHeaderView_MonsterCombat(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterCombat = (global::System.Int32)Value;
        }
        private object get_36_MonsterHeaderView_MonsterLevel(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterLevel;
        }
        private void set_36_MonsterHeaderView_MonsterLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterLevel = (global::System.Int32)Value;
        }
        private object get_37_MonsterHeaderView_MonsterVictory(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterVictory;
        }
        private void set_37_MonsterHeaderView_MonsterVictory(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterVictory = (global::System.Int32)Value;
        }
        private object get_38_MonsterStatsView_Life(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            return that.Life;
        }
        private void set_38_MonsterStatsView_Life(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            that.Life = (global::System.Int32)Value;
        }
        private object get_39_MonsterStatsView_Exp(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            return that.Exp;
        }
        private void set_39_MonsterStatsView_Exp(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            that.Exp = (global::System.Int32)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember xamlMember = null;
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "NestedWorld.Style.TabHeader.Glyph":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeader");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Glyph", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_TabHeader_Glyph;
                xamlMember.Setter = set_4_TabHeader_Glyph;
                break;
            case "NestedWorld.Style.TabHeader.Label":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeader");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TabHeader_Label;
                xamlMember.Setter = set_5_TabHeader_Label;
                break;
            case "NestedWorld.View.MonsterListView.monsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_6_MonsterListView_monsterList;
                xamlMember.Setter = set_6_MonsterListView_monsterList;
                break;
            case "NestedWorld.View.MonsterViews.MonsterFullView.monsterToDisplay":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterFullView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterToDisplay", "NestedWorld.Classes.ElementsGame.Monsters.UserMonster");
                xamlMember.Getter = get_7_MonsterFullView_monsterToDisplay;
                xamlMember.Setter = set_7_MonsterFullView_monsterToDisplay;
                break;
            case "NestedWorld.View.GardenView.elipseNumber":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "elipseNumber", "Int32");
                xamlMember.Getter = get_8_GardenView_elipseNumber;
                xamlMember.Setter = set_8_GardenView_elipseNumber;
                break;
            case "NestedWorld.View.HomeView.UserImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_HomeView_UserImage;
                xamlMember.Setter = set_9_HomeView_UserImage;
                break;
            case "NestedWorld.View.HomeView.BackgroundImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "BackgroundImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_HomeView_BackgroundImage;
                xamlMember.Setter = set_10_HomeView_BackgroundImage;
                break;
            case "NestedWorld.View.HomeView.UserName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_HomeView_UserName;
                xamlMember.Setter = set_11_HomeView_UserName;
                break;
            case "NestedWorld.View.HomeView.userLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "userLevel", "String");
                xamlMember.Getter = get_12_HomeView_userLevel;
                xamlMember.Setter = set_12_HomeView_userLevel;
                break;
            case "NestedWorld.View.HomeView.MonsterCaptured":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterCaptured", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_HomeView_MonsterCaptured;
                xamlMember.Setter = set_13_HomeView_MonsterCaptured;
                break;
            case "NestedWorld.View.HomeView.AreaCaptured":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "AreaCaptured", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_HomeView_AreaCaptured;
                xamlMember.Setter = set_14_HomeView_AreaCaptured;
                break;
            case "NestedWorld.View.HomeView.AllyOnline":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "AllyOnline", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_HomeView_AllyOnline;
                xamlMember.Setter = set_15_HomeView_AllyOnline;
                break;
            case "NestedWorld.View.HomeView.MonsterSee":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterSee", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_HomeView_MonsterSee;
                xamlMember.Setter = set_16_HomeView_MonsterSee;
                break;
            case "NestedWorld.View.HomeView.UserLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.HomeView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_HomeView_UserLevel;
                xamlMember.Setter = set_17_HomeView_UserLevel;
                break;
            case "NestedWorld.View.MonsterView.monsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_18_MonsterView_monsterList;
                xamlMember.Setter = set_18_MonsterView_monsterList;
                break;
            case "NestedWorld.View.UserView.userList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.UserView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "userList", "NestedWorld.Classes.ElementsGame.Users.UserList");
                xamlMember.Getter = get_19_UserView_userList;
                xamlMember.Setter = set_19_UserView_userList;
                break;
            case "NestedWorld.View.PrepareBattleViews.MonsterView.monsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleViews.MonsterView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_20_MonsterView_monsterList;
                xamlMember.Setter = set_20_MonsterView_monsterList;
                break;
            case "NestedWorld.Style.TabHeaderMap.Glyph":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeaderMap");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Glyph", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_TabHeaderMap_Glyph;
                xamlMember.Setter = set_21_TabHeaderMap_Glyph;
                break;
            case "NestedWorld.Style.TabHeaderMap.Label":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeaderMap");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_TabHeaderMap_Label;
                xamlMember.Setter = set_22_TabHeaderMap_Label;
                break;
            case "NestedWorld.View.NotificationView.NotificationNumber":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.NotificationView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "NotificationNumber", "Int32");
                xamlMember.Getter = get_23_NotificationView_NotificationNumber;
                xamlMember.Setter = set_23_NotificationView_NotificationNumber;
                break;
            case "NestedWorld.View.NotificationView.Tap":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.NotificationView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Tap", "Windows.UI.Xaml.Input.TappedEventHandler");
                xamlMember.Getter = get_24_NotificationView_Tap;
                xamlMember.SetIsReadOnly();
                break;
            case "NestedWorld.View.MonsterSoloView.MonsterName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_MonsterSoloView_MonsterName;
                xamlMember.Setter = set_25_MonsterSoloView_MonsterName;
                break;
            case "NestedWorld.View.MonsterSoloView.Level":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Level", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_MonsterSoloView_Level;
                xamlMember.Setter = set_26_MonsterSoloView_Level;
                break;
            case "NestedWorld.View.MonsterSoloView.MonsterImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_MonsterSoloView_MonsterImage;
                xamlMember.Setter = set_27_MonsterSoloView_MonsterImage;
                break;
            case "NestedWorld.View.MonsterSoloView.Type":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Type", "NestedWorld.Classes.ElementsGame.TypeEnum");
                xamlMember.Getter = get_28_MonsterSoloView_Type;
                xamlMember.Setter = set_28_MonsterSoloView_Type;
                break;
            case "NestedWorld.View.MonsterSoloView.BackgroundColor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "BackgroundColor", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_MonsterSoloView_BackgroundColor;
                xamlMember.Setter = set_29_MonsterSoloView_BackgroundColor;
                break;
            case "NestedWorld.View.MonsterSoloView.userMonster":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "userMonster", "NestedWorld.Classes.ElementsGame.Monsters.UserMonster");
                xamlMember.Getter = get_30_MonsterSoloView_userMonster;
                xamlMember.Setter = set_30_MonsterSoloView_userMonster;
                break;
            case "NestedWorld.View.MonsterViews.MonsterAttacksView.monsterAttackList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterAttacksView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterAttackList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList");
                xamlMember.Getter = get_31_MonsterAttacksView_monsterAttackList;
                xamlMember.Setter = set_31_MonsterAttacksView_monsterAttackList;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_MonsterHeaderView_MonsterName;
                xamlMember.Setter = set_32_MonsterHeaderView_MonsterName;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_MonsterHeaderView_MonsterImage;
                xamlMember.Setter = set_33_MonsterHeaderView_MonsterImage;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterType":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterType", "NestedWorld.Classes.ElementsGame.TypeEnum");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_MonsterHeaderView_MonsterType;
                xamlMember.Setter = set_34_MonsterHeaderView_MonsterType;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterCombat":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterCombat", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_MonsterHeaderView_MonsterCombat;
                xamlMember.Setter = set_35_MonsterHeaderView_MonsterCombat;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_MonsterHeaderView_MonsterLevel;
                xamlMember.Setter = set_36_MonsterHeaderView_MonsterLevel;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterVictory":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterVictory", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_MonsterHeaderView_MonsterVictory;
                xamlMember.Setter = set_37_MonsterHeaderView_MonsterVictory;
                break;
            case "NestedWorld.View.MonsterViews.MonsterStatsView.Life":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterStatsView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Life", "Int32");
                xamlMember.Getter = get_38_MonsterStatsView_Life;
                xamlMember.Setter = set_38_MonsterStatsView_Life;
                break;
            case "NestedWorld.View.MonsterViews.MonsterStatsView.Exp":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterStatsView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Exp", "Int32");
                xamlMember.Getter = get_39_MonsterStatsView_Exp;
                xamlMember.Setter = set_39_MonsterStatsView_Exp;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType
    {
        global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


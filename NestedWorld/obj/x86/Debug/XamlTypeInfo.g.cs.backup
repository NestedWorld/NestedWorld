//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace NestedWorld
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace NestedWorld.NestedWorld_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[191];
            _typeNameTable[0] = "Windows.UI.Color";
            _typeNameTable[1] = "System.ValueType";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Byte";
            _typeNameTable[4] = "NestedWorld.MainPage";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[7] = "NestedWorld.View.BattleViews.BattleCanvas";
            _typeNameTable[8] = "NestedWorld.Classes.ElementsGame.Battle.BattleCore";
            _typeNameTable[9] = "NestedWorld.View.BattleViews.EnemieMonster";
            _typeNameTable[10] = "String";
            _typeNameTable[11] = "Int32";
            _typeNameTable[12] = "NestedWorld.Classes.ElementsGame.Monsters.UserMonster";
            _typeNameTable[13] = "NestedWorld.Classes.ElementsGame.Monsters.Monster";
            _typeNameTable[14] = "NestedWorld.View.BattleViews.AnnimationCanvas";
            _typeNameTable[15] = "NestedWorld.View.BattleViews.UserMonster";
            _typeNameTable[16] = "NestedWorld.View.BattleViews.UserMonsterList";
            _typeNameTable[17] = "NestedWorld.Pages.BattlePage";
            _typeNameTable[18] = "NestedWorld.View.ChatViews.ChanelListView";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.ListView";
            _typeNameTable[20] = "NestedWorld.View.ChatViews.StartNewChatView";
            _typeNameTable[21] = "NestedWorld.View.ChatViews.ChatView";
            _typeNameTable[22] = "NestedWorld.Classes.Chat.Channel";
            _typeNameTable[23] = "NestedWorld.Pages.ChatPage";
            _typeNameTable[24] = "NestedWorld.Style.TabHeader";
            _typeNameTable[25] = "Windows.UI.Xaml.Media.Geometry";
            _typeNameTable[26] = "Boolean";
            _typeNameTable[27] = "NestedWorld.View.ShopView";
            _typeNameTable[28] = "NestedWorld.Classes.ElementsGame.Shop.Shop";
            _typeNameTable[29] = "NestedWorld.View.MonsterListView";
            _typeNameTable[30] = "NestedWorld.Classes.ElementsGame.Monsters.MonsterList";
            _typeNameTable[31] = "NestedWorld.View.MonsterViews.MonsterFullView";
            _typeNameTable[32] = "NestedWorld.View.MapView";
            _typeNameTable[33] = "NestedWorld.View.GardenView";
            _typeNameTable[34] = "NestedWorld.View.HomeView";
            _typeNameTable[35] = "NestedWorld.View.MonsterView";
            _typeNameTable[36] = "NestedWorld.View.UserView";
            _typeNameTable[37] = "NestedWorld.Classes.ElementsGame.Users.UserList";
            _typeNameTable[38] = "NestedWorld.Pages.HomePage";
            _typeNameTable[39] = "NestedWorld.Pages.MonsterPage";
            _typeNameTable[40] = "NestedWorld.View.PrepareBattleView.UsersProfileEntrance";
            _typeNameTable[41] = "NestedWorld.Classes.ElementsGame.GameCore.UserInfo";
            _typeNameTable[42] = "NestedWorld.Classes.ElementsGame.Users.User";
            _typeNameTable[43] = "NestedWorld.View.PrepareBattleView.UserMonsterListView";
            _typeNameTable[44] = "NestedWorld.Pages.PrepareBattlePage";
            _typeNameTable[45] = "NestedWorld.View.ProfileViews.MainView";
            _typeNameTable[46] = "NestedWorld.View.ProfileViews.MonsterStat";
            _typeNameTable[47] = "NestedWorld.View.ProfileViews.StatiUserView";
            _typeNameTable[48] = "NestedWorld.Pages.ProfilePage";
            _typeNameTable[49] = "NestedWorld.Pages.SettingsPage";
            _typeNameTable[50] = "NestedWorld.PopUp.CatchAreaProposition";
            _typeNameTable[51] = "NestedWorld.PopUp.ForgotPassPopUp";
            _typeNameTable[52] = "NestedWorld.PopUp.MonsterNearPopUp";
            _typeNameTable[53] = "NestedWorld.PopUp.NewBattlePopUp";
            _typeNameTable[54] = "NestedWorld.PopUp.RegisterPopUp";
            _typeNameTable[55] = "NestedWorld.PopUp.SettingsPopUp";
            _typeNameTable[56] = "NestedWorld.Style.TabHeaderMap";
            _typeNameTable[57] = "NestedWorld.View.BattleViews.BattleIcon";
            _typeNameTable[58] = "Double";
            _typeNameTable[59] = "NestedWorld.View.ChatViews.ChanelView";
            _typeNameTable[60] = "NestedWorld.Classes.Chat.MessageContentPresenter";
            _typeNameTable[61] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[62] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[63] = "NestedWorld.View.ChatViews.MeMessageTemplate";
            _typeNameTable[64] = "NestedWorld.View.ChatViews.YouMessageTemplate";
            _typeNameTable[65] = "NestedWorld.View.GardenViews.GardenElementListView";
            _typeNameTable[66] = "Windows.UI.Xaml.Controls.GridView";
            _typeNameTable[67] = "NestedWorld.View.GardenViews.GardenElementView";
            _typeNameTable[68] = "NestedWorld.View.GardenViews.GardenItem";
            _typeNameTable[69] = "NestedWorld.Classes.Garden.GardenElement";
            _typeNameTable[70] = "NestedWorld.View.NotificationView";
            _typeNameTable[71] = "Windows.UI.Xaml.Input.TappedEventHandler";
            _typeNameTable[72] = "NestedWorld.View.MapPoint.MonsterMapPoint";
            _typeNameTable[73] = "NestedWorld.View.MapPoint.PlayerMapPoint";
            _typeNameTable[74] = "NestedWorld.View.MapPoint.UserMapPoint";
            _typeNameTable[75] = "NestedWorld.View.MapViews.MapControlView";
            _typeNameTable[76] = "Windows.UI.Xaml.Controls.Maps.MapControl";
            _typeNameTable[77] = "NestedWorld.View.MapViews.MapListElement";
            _typeNameTable[78] = "NestedWorld.View.MapViews.MonsterMapList";
            _typeNameTable[79] = "Windows.UI.Xaml.Controls.StackPanel";
            _typeNameTable[80] = "NestedWorld.View.MapViews.UserMapList";
            _typeNameTable[81] = "NestedWorld.View.MonsterViews.MonsterView";
            _typeNameTable[82] = "NestedWorld.View.MonsterSoloView";
            _typeNameTable[83] = "NestedWorld.Classes.ElementsGame.TypeEnum";
            _typeNameTable[84] = "System.Enum";
            _typeNameTable[85] = "NestedWorld.View.MonsterViews.MonsterAttackView";
            _typeNameTable[86] = "NestedWorld.View.MonsterViews.MonsterAttacksView";
            _typeNameTable[87] = "NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList";
            _typeNameTable[88] = "NestedWorld.View.MonsterViews.MonsterHeaderView";
            _typeNameTable[89] = "NestedWorld.View.MonsterViews.MonsterStatsView";
            _typeNameTable[90] = "NestedWorld.View.MonsterViews.MonsterLocationView";
            _typeNameTable[91] = "Telerik.UI.Xaml.Controls.Chart.ChartPalette";
            _typeNameTable[92] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[93] = "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection";
            _typeNameTable[94] = "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>";
            _typeNameTable[95] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[96] = "Telerik.UI.Xaml.Controls.Chart.RadPieChart";
            _typeNameTable[97] = "Telerik.UI.Xaml.Controls.Chart.RadChartBase";
            _typeNameTable[98] = "Telerik.UI.Xaml.Controls.Chart.PresenterBase";
            _typeNameTable[99] = "Telerik.UI.Xaml.Controls.RadControl";
            _typeNameTable[100] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[101] = "Telerik.UI.Xaml.Controls.Chart.PieSeriesCollection";
            _typeNameTable[102] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.PieSeries>";
            _typeNameTable[103] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.PieSeries>";
            _typeNameTable[104] = "Telerik.UI.Xaml.Controls.Chart.PieSeries";
            _typeNameTable[105] = "Telerik.UI.Xaml.Controls.Chart.ChartSeries";
            _typeNameTable[106] = "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter";
            _typeNameTable[107] = "Telerik.Core.ElementCollection`1<Telerik.Charting.PieDataPoint>";
            _typeNameTable[108] = "System.Collections.ObjectModel.Collection`1<Telerik.Charting.PieDataPoint>";
            _typeNameTable[109] = "Telerik.Charting.PieDataPoint";
            _typeNameTable[110] = "Telerik.Charting.SingleValueDataPoint";
            _typeNameTable[111] = "Telerik.Charting.DataPoint";
            _typeNameTable[112] = "Telerik.Core.Node";
            _typeNameTable[113] = "Telerik.Core.PropertyBagObject";
            _typeNameTable[114] = "Telerik.Core.IElementPresenter";
            _typeNameTable[115] = "Telerik.Core.NodeState";
            _typeNameTable[116] = "Telerik.Core.RadRect";
            _typeNameTable[117] = "Telerik.Core.Element";
            _typeNameTable[118] = "Windows.UI.Xaml.Style";
            _typeNameTable[119] = "Telerik.UI.Xaml.Controls.Chart.DataPointBinding";
            _typeNameTable[120] = "Windows.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[121] = "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.Style>";
            _typeNameTable[122] = "System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Style>";
            _typeNameTable[123] = "Telerik.Charting.AngleRange";
            _typeNameTable[124] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>";
            _typeNameTable[125] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>";
            _typeNameTable[126] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition";
            _typeNameTable[127] = "Windows.UI.Xaml.HorizontalAlignment";
            _typeNameTable[128] = "Windows.UI.Xaml.VerticalAlignment";
            _typeNameTable[129] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[130] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[131] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy";
            _typeNameTable[132] = "System.Collections.IEnumerable";
            _typeNameTable[133] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider";
            _typeNameTable[134] = "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName";
            _typeNameTable[135] = "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection";
            _typeNameTable[136] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>";
            _typeNameTable[137] = "Telerik.UI.Xaml.Controls.Chart.ChartBehavior";
            _typeNameTable[138] = "Windows.Foundation.Size";
            _typeNameTable[139] = "Windows.Foundation.Point";
            _typeNameTable[140] = "Telerik.UI.Xaml.Controls.Chart.DoughnutSeries";
            _typeNameTable[141] = "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding";
            _typeNameTable[142] = "NestedWorld.View.SettingsViews.SettingsView";
            _typeNameTable[143] = "NestedWorld.View.ShopViews.ShopGroupeListView";
            _typeNameTable[144] = "NestedWorld.View.ShopViews.ShopElementInformation";
            _typeNameTable[145] = "NestedWorld.View.ShopViews.ItemEffectView";
            _typeNameTable[146] = "NestedWorld.View.ShopViews.ShopItemView";
            _typeNameTable[147] = "NestedWorld.View.ShopViews.ShopElementListView";
            _typeNameTable[148] = "NestedWorld.View.ShopViews.ShopGroupeView";
            _typeNameTable[149] = "NestedWorld.View.ShopViews.ShopMainView";
            _typeNameTable[150] = "NestedWorld.View.UserViews.AllyView";
            _typeNameTable[151] = "Telerik.UI.Drawing.D2DResource";
            _typeNameTable[152] = "Telerik.UI.Drawing.D2DBrush";
            _typeNameTable[153] = "Telerik.UI.Drawing.D2DTextStyle";
            _typeNameTable[154] = "Telerik.UI.Drawing.FontWeightName";
            _typeNameTable[155] = "Windows.UI.Xaml.TextAlignment";
            _typeNameTable[156] = "Windows.UI.Text.FontStyle";
            _typeNameTable[157] = "Telerik.UI.Drawing.D2DShapeStyle";
            _typeNameTable[158] = "Telerik.UI.Drawing.D2DSolidColorBrush";
            _typeNameTable[159] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition";
            _typeNameTable[160] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation";
            _typeNameTable[161] = "Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition";
            _typeNameTable[162] = "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase";
            _typeNameTable[163] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[164] = "Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition";
            _typeNameTable[165] = "Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition";
            _typeNameTable[166] = "Telerik.UI.Xaml.Controls.Input.HighlightStyle";
            _typeNameTable[167] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[168] = "Telerik.UI.Xaml.Controls.Input.FontWeightName";
            _typeNameTable[169] = "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle";
            _typeNameTable[170] = "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu";
            _typeNameTable[171] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>";
            _typeNameTable[172] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>";
            _typeNameTable[173] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem";
            _typeNameTable[174] = "Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject";
            _typeNameTable[175] = "System.Windows.Input.ICommand";
            _typeNameTable[176] = "Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService";
            _typeNameTable[177] = "Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[178] = "Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[179] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[180] = "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[181] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[182] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[183] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[184] = "Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[185] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[186] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior";
            _typeNameTable[187] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[188] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers";
            _typeNameTable[189] = "Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter";
            _typeNameTable[190] = "Windows.UI.Xaml.Media.Animation.Storyboard";

            _typeTable = new global::System.Type[191];
            _typeTable[0] = typeof(global::Windows.UI.Color);
            _typeTable[1] = typeof(global::System.ValueType);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Byte);
            _typeTable[4] = typeof(global::NestedWorld.MainPage);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[7] = typeof(global::NestedWorld.View.BattleViews.BattleCanvas);
            _typeTable[8] = typeof(global::NestedWorld.Classes.ElementsGame.Battle.BattleCore);
            _typeTable[9] = typeof(global::NestedWorld.View.BattleViews.EnemieMonster);
            _typeTable[10] = typeof(global::System.String);
            _typeTable[11] = typeof(global::System.Int32);
            _typeTable[12] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster);
            _typeTable[13] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.Monster);
            _typeTable[14] = typeof(global::NestedWorld.View.BattleViews.AnnimationCanvas);
            _typeTable[15] = typeof(global::NestedWorld.View.BattleViews.UserMonster);
            _typeTable[16] = typeof(global::NestedWorld.View.BattleViews.UserMonsterList);
            _typeTable[17] = typeof(global::NestedWorld.Pages.BattlePage);
            _typeTable[18] = typeof(global::NestedWorld.View.ChatViews.ChanelListView);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.ListView);
            _typeTable[20] = typeof(global::NestedWorld.View.ChatViews.StartNewChatView);
            _typeTable[21] = typeof(global::NestedWorld.View.ChatViews.ChatView);
            _typeTable[22] = typeof(global::NestedWorld.Classes.Chat.Channel);
            _typeTable[23] = typeof(global::NestedWorld.Pages.ChatPage);
            _typeTable[24] = typeof(global::NestedWorld.Style.TabHeader);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Media.Geometry);
            _typeTable[26] = typeof(global::System.Boolean);
            _typeTable[27] = typeof(global::NestedWorld.View.ShopView);
            _typeTable[28] = typeof(global::NestedWorld.Classes.ElementsGame.Shop.Shop);
            _typeTable[29] = typeof(global::NestedWorld.View.MonsterListView);
            _typeTable[30] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList);
            _typeTable[31] = typeof(global::NestedWorld.View.MonsterViews.MonsterFullView);
            _typeTable[32] = typeof(global::NestedWorld.View.MapView);
            _typeTable[33] = typeof(global::NestedWorld.View.GardenView);
            _typeTable[34] = typeof(global::NestedWorld.View.HomeView);
            _typeTable[35] = typeof(global::NestedWorld.View.MonsterView);
            _typeTable[36] = typeof(global::NestedWorld.View.UserView);
            _typeTable[37] = typeof(global::NestedWorld.Classes.ElementsGame.Users.UserList);
            _typeTable[38] = typeof(global::NestedWorld.Pages.HomePage);
            _typeTable[39] = typeof(global::NestedWorld.Pages.MonsterPage);
            _typeTable[40] = typeof(global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance);
            _typeTable[41] = typeof(global::NestedWorld.Classes.ElementsGame.GameCore.UserInfo);
            _typeTable[42] = typeof(global::NestedWorld.Classes.ElementsGame.Users.User);
            _typeTable[43] = typeof(global::NestedWorld.View.PrepareBattleView.UserMonsterListView);
            _typeTable[44] = typeof(global::NestedWorld.Pages.PrepareBattlePage);
            _typeTable[45] = typeof(global::NestedWorld.View.ProfileViews.MainView);
            _typeTable[46] = typeof(global::NestedWorld.View.ProfileViews.MonsterStat);
            _typeTable[47] = typeof(global::NestedWorld.View.ProfileViews.StatiUserView);
            _typeTable[48] = typeof(global::NestedWorld.Pages.ProfilePage);
            _typeTable[49] = typeof(global::NestedWorld.Pages.SettingsPage);
            _typeTable[50] = typeof(global::NestedWorld.PopUp.CatchAreaProposition);
            _typeTable[51] = typeof(global::NestedWorld.PopUp.ForgotPassPopUp);
            _typeTable[52] = typeof(global::NestedWorld.PopUp.MonsterNearPopUp);
            _typeTable[53] = typeof(global::NestedWorld.PopUp.NewBattlePopUp);
            _typeTable[54] = typeof(global::NestedWorld.PopUp.RegisterPopUp);
            _typeTable[55] = typeof(global::NestedWorld.PopUp.SettingsPopUp);
            _typeTable[56] = typeof(global::NestedWorld.Style.TabHeaderMap);
            _typeTable[57] = typeof(global::NestedWorld.View.BattleViews.BattleIcon);
            _typeTable[58] = typeof(global::System.Double);
            _typeTable[59] = typeof(global::NestedWorld.View.ChatViews.ChanelView);
            _typeTable[60] = typeof(global::NestedWorld.Classes.Chat.MessageContentPresenter);
            _typeTable[61] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[62] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[63] = typeof(global::NestedWorld.View.ChatViews.MeMessageTemplate);
            _typeTable[64] = typeof(global::NestedWorld.View.ChatViews.YouMessageTemplate);
            _typeTable[65] = typeof(global::NestedWorld.View.GardenViews.GardenElementListView);
            _typeTable[66] = typeof(global::Windows.UI.Xaml.Controls.GridView);
            _typeTable[67] = typeof(global::NestedWorld.View.GardenViews.GardenElementView);
            _typeTable[68] = typeof(global::NestedWorld.View.GardenViews.GardenItem);
            _typeTable[69] = typeof(global::NestedWorld.Classes.Garden.GardenElement);
            _typeTable[70] = typeof(global::NestedWorld.View.NotificationView);
            _typeTable[71] = typeof(global::Windows.UI.Xaml.Input.TappedEventHandler);
            _typeTable[72] = typeof(global::NestedWorld.View.MapPoint.MonsterMapPoint);
            _typeTable[73] = typeof(global::NestedWorld.View.MapPoint.PlayerMapPoint);
            _typeTable[74] = typeof(global::NestedWorld.View.MapPoint.UserMapPoint);
            _typeTable[75] = typeof(global::NestedWorld.View.MapViews.MapControlView);
            _typeTable[76] = typeof(global::Windows.UI.Xaml.Controls.Maps.MapControl);
            _typeTable[77] = typeof(global::NestedWorld.View.MapViews.MapListElement);
            _typeTable[78] = typeof(global::NestedWorld.View.MapViews.MonsterMapList);
            _typeTable[79] = typeof(global::Windows.UI.Xaml.Controls.StackPanel);
            _typeTable[80] = typeof(global::NestedWorld.View.MapViews.UserMapList);
            _typeTable[81] = typeof(global::NestedWorld.View.MonsterViews.MonsterView);
            _typeTable[82] = typeof(global::NestedWorld.View.MonsterSoloView);
            _typeTable[83] = typeof(global::NestedWorld.Classes.ElementsGame.TypeEnum);
            _typeTable[84] = typeof(global::System.Enum);
            _typeTable[85] = typeof(global::NestedWorld.View.MonsterViews.MonsterAttackView);
            _typeTable[86] = typeof(global::NestedWorld.View.MonsterViews.MonsterAttacksView);
            _typeTable[87] = typeof(global::NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList);
            _typeTable[88] = typeof(global::NestedWorld.View.MonsterViews.MonsterHeaderView);
            _typeTable[89] = typeof(global::NestedWorld.View.MonsterViews.MonsterStatsView);
            _typeTable[90] = typeof(global::NestedWorld.View.MonsterViews.MonsterLocationView);
            _typeTable[91] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPalette);
            _typeTable[92] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[93] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection);
            _typeTable[94] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>);
            _typeTable[95] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[96] = typeof(global::Telerik.UI.Xaml.Controls.Chart.RadPieChart);
            _typeTable[97] = typeof(global::Telerik.UI.Xaml.Controls.Chart.RadChartBase);
            _typeTable[98] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterBase);
            _typeTable[99] = typeof(global::Telerik.UI.Xaml.Controls.RadControl);
            _typeTable[100] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[101] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PieSeriesCollection);
            _typeTable[102] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.PieSeries>);
            _typeTable[103] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.PieSeries>);
            _typeTable[104] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PieSeries);
            _typeTable[105] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeries);
            _typeTable[106] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter);
            _typeTable[107] = typeof(global::Telerik.Core.ElementCollection<global::Telerik.Charting.PieDataPoint>);
            _typeTable[108] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.PieDataPoint>);
            _typeTable[109] = typeof(global::Telerik.Charting.PieDataPoint);
            _typeTable[110] = typeof(global::Telerik.Charting.SingleValueDataPoint);
            _typeTable[111] = typeof(global::Telerik.Charting.DataPoint);
            _typeTable[112] = typeof(global::Telerik.Core.Node);
            _typeTable[113] = typeof(global::Telerik.Core.PropertyBagObject);
            _typeTable[114] = typeof(global::Telerik.Core.IElementPresenter);
            _typeTable[115] = typeof(global::Telerik.Core.NodeState);
            _typeTable[116] = typeof(global::Telerik.Core.RadRect);
            _typeTable[117] = typeof(global::Telerik.Core.Element);
            _typeTable[118] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[119] = typeof(global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding);
            _typeTable[120] = typeof(global::Windows.UI.Xaml.Controls.StyleSelector);
            _typeTable[121] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Style>);
            _typeTable[122] = typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Style>);
            _typeTable[123] = typeof(global::Telerik.Charting.AngleRange);
            _typeTable[124] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>);
            _typeTable[125] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>);
            _typeTable[126] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition);
            _typeTable[127] = typeof(global::Windows.UI.Xaml.HorizontalAlignment);
            _typeTable[128] = typeof(global::Windows.UI.Xaml.VerticalAlignment);
            _typeTable[129] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[130] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[131] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy);
            _typeTable[132] = typeof(global::System.Collections.IEnumerable);
            _typeTable[133] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider);
            _typeTable[134] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName);
            _typeTable[135] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection);
            _typeTable[136] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>);
            _typeTable[137] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior);
            _typeTable[138] = typeof(global::Windows.Foundation.Size);
            _typeTable[139] = typeof(global::Windows.Foundation.Point);
            _typeTable[140] = typeof(global::Telerik.UI.Xaml.Controls.Chart.DoughnutSeries);
            _typeTable[141] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding);
            _typeTable[142] = typeof(global::NestedWorld.View.SettingsViews.SettingsView);
            _typeTable[143] = typeof(global::NestedWorld.View.ShopViews.ShopGroupeListView);
            _typeTable[144] = typeof(global::NestedWorld.View.ShopViews.ShopElementInformation);
            _typeTable[145] = typeof(global::NestedWorld.View.ShopViews.ItemEffectView);
            _typeTable[146] = typeof(global::NestedWorld.View.ShopViews.ShopItemView);
            _typeTable[147] = typeof(global::NestedWorld.View.ShopViews.ShopElementListView);
            _typeTable[148] = typeof(global::NestedWorld.View.ShopViews.ShopGroupeView);
            _typeTable[149] = typeof(global::NestedWorld.View.ShopViews.ShopMainView);
            _typeTable[150] = typeof(global::NestedWorld.View.UserViews.AllyView);
            _typeTable[151] = typeof(global::Telerik.UI.Drawing.D2DResource);
            _typeTable[152] = typeof(global::Telerik.UI.Drawing.D2DBrush);
            _typeTable[153] = typeof(global::Telerik.UI.Drawing.D2DTextStyle);
            _typeTable[154] = typeof(global::Telerik.UI.Drawing.FontWeightName);
            _typeTable[155] = typeof(global::Windows.UI.Xaml.TextAlignment);
            _typeTable[156] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[157] = typeof(global::Telerik.UI.Drawing.D2DShapeStyle);
            _typeTable[158] = typeof(global::Telerik.UI.Drawing.D2DSolidColorBrush);
            _typeTable[159] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition);
            _typeTable[160] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation);
            _typeTable[161] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition);
            _typeTable[162] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase);
            _typeTable[163] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[164] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition);
            _typeTable[165] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition);
            _typeTable[166] = typeof(global::Telerik.UI.Xaml.Controls.Input.HighlightStyle);
            _typeTable[167] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[168] = typeof(global::Telerik.UI.Xaml.Controls.Input.FontWeightName);
            _typeTable[169] = typeof(global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle);
            _typeTable[170] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu);
            _typeTable[171] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>);
            _typeTable[172] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>);
            _typeTable[173] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem);
            _typeTable[174] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject);
            _typeTable[175] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[176] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService);
            _typeTable[177] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[178] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ServiceBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[179] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[180] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[181] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[182] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[183] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[184] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[185] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[186] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior);
            _typeTable[187] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[188] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers);
            _typeTable[189] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter);
            _typeTable[190] = typeof(global::Windows.UI.Xaml.Media.Animation.Storyboard);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_4_MainPage() { return new global::NestedWorld.MainPage(); }
        private object Activate_7_BattleCanvas() { return new global::NestedWorld.View.BattleViews.BattleCanvas(); }
        private object Activate_8_BattleCore() { return new global::NestedWorld.Classes.ElementsGame.Battle.BattleCore(); }
        private object Activate_9_EnemieMonster() { return new global::NestedWorld.View.BattleViews.EnemieMonster(); }
        private object Activate_14_AnnimationCanvas() { return new global::NestedWorld.View.BattleViews.AnnimationCanvas(); }
        private object Activate_15_UserMonster() { return new global::NestedWorld.View.BattleViews.UserMonster(); }
        private object Activate_16_UserMonsterList() { return new global::NestedWorld.View.BattleViews.UserMonsterList(); }
        private object Activate_17_BattlePage() { return new global::NestedWorld.Pages.BattlePage(); }
        private object Activate_18_ChanelListView() { return new global::NestedWorld.View.ChatViews.ChanelListView(); }
        private object Activate_20_StartNewChatView() { return new global::NestedWorld.View.ChatViews.StartNewChatView(); }
        private object Activate_21_ChatView() { return new global::NestedWorld.View.ChatViews.ChatView(); }
        private object Activate_23_ChatPage() { return new global::NestedWorld.Pages.ChatPage(); }
        private object Activate_24_TabHeader() { return new global::NestedWorld.Style.TabHeader(); }
        private object Activate_27_ShopView() { return new global::NestedWorld.View.ShopView(); }
        private object Activate_28_Shop() { return new global::NestedWorld.Classes.ElementsGame.Shop.Shop(); }
        private object Activate_29_MonsterListView() { return new global::NestedWorld.View.MonsterListView(); }
        private object Activate_30_MonsterList() { return new global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList(); }
        private object Activate_31_MonsterFullView() { return new global::NestedWorld.View.MonsterViews.MonsterFullView(); }
        private object Activate_32_MapView() { return new global::NestedWorld.View.MapView(); }
        private object Activate_33_GardenView() { return new global::NestedWorld.View.GardenView(); }
        private object Activate_34_HomeView() { return new global::NestedWorld.View.HomeView(); }
        private object Activate_35_MonsterView() { return new global::NestedWorld.View.MonsterView(); }
        private object Activate_36_UserView() { return new global::NestedWorld.View.UserView(); }
        private object Activate_37_UserList() { return new global::NestedWorld.Classes.ElementsGame.Users.UserList(); }
        private object Activate_38_HomePage() { return new global::NestedWorld.Pages.HomePage(); }
        private object Activate_39_MonsterPage() { return new global::NestedWorld.Pages.MonsterPage(); }
        private object Activate_40_UsersProfileEntrance() { return new global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance(); }
        private object Activate_43_UserMonsterListView() { return new global::NestedWorld.View.PrepareBattleView.UserMonsterListView(); }
        private object Activate_44_PrepareBattlePage() { return new global::NestedWorld.Pages.PrepareBattlePage(); }
        private object Activate_45_MainView() { return new global::NestedWorld.View.ProfileViews.MainView(); }
        private object Activate_46_MonsterStat() { return new global::NestedWorld.View.ProfileViews.MonsterStat(); }
        private object Activate_47_StatiUserView() { return new global::NestedWorld.View.ProfileViews.StatiUserView(); }
        private object Activate_48_ProfilePage() { return new global::NestedWorld.Pages.ProfilePage(); }
        private object Activate_49_SettingsPage() { return new global::NestedWorld.Pages.SettingsPage(); }
        private object Activate_50_CatchAreaProposition() { return new global::NestedWorld.PopUp.CatchAreaProposition(); }
        private object Activate_51_ForgotPassPopUp() { return new global::NestedWorld.PopUp.ForgotPassPopUp(); }
        private object Activate_52_MonsterNearPopUp() { return new global::NestedWorld.PopUp.MonsterNearPopUp(); }
        private object Activate_54_RegisterPopUp() { return new global::NestedWorld.PopUp.RegisterPopUp(); }
        private object Activate_55_SettingsPopUp() { return new global::NestedWorld.PopUp.SettingsPopUp(); }
        private object Activate_56_TabHeaderMap() { return new global::NestedWorld.Style.TabHeaderMap(); }
        private object Activate_59_ChanelView() { return new global::NestedWorld.View.ChatViews.ChanelView(); }
        private object Activate_60_MessageContentPresenter() { return new global::NestedWorld.Classes.Chat.MessageContentPresenter(); }
        private object Activate_63_MeMessageTemplate() { return new global::NestedWorld.View.ChatViews.MeMessageTemplate(); }
        private object Activate_64_YouMessageTemplate() { return new global::NestedWorld.View.ChatViews.YouMessageTemplate(); }
        private object Activate_65_GardenElementListView() { return new global::NestedWorld.View.GardenViews.GardenElementListView(); }
        private object Activate_67_GardenElementView() { return new global::NestedWorld.View.GardenViews.GardenElementView(); }
        private object Activate_68_GardenItem() { return new global::NestedWorld.View.GardenViews.GardenItem(); }
        private object Activate_70_NotificationView() { return new global::NestedWorld.View.NotificationView(); }
        private object Activate_72_MonsterMapPoint() { return new global::NestedWorld.View.MapPoint.MonsterMapPoint(); }
        private object Activate_73_PlayerMapPoint() { return new global::NestedWorld.View.MapPoint.PlayerMapPoint(); }
        private object Activate_74_UserMapPoint() { return new global::NestedWorld.View.MapPoint.UserMapPoint(); }
        private object Activate_75_MapControlView() { return new global::NestedWorld.View.MapViews.MapControlView(); }
        private object Activate_77_MapListElement() { return new global::NestedWorld.View.MapViews.MapListElement(); }
        private object Activate_78_MonsterMapList() { return new global::NestedWorld.View.MapViews.MonsterMapList(); }
        private object Activate_80_UserMapList() { return new global::NestedWorld.View.MapViews.UserMapList(); }
        private object Activate_81_MonsterView() { return new global::NestedWorld.View.MonsterViews.MonsterView(); }
        private object Activate_82_MonsterSoloView() { return new global::NestedWorld.View.MonsterSoloView(); }
        private object Activate_85_MonsterAttackView() { return new global::NestedWorld.View.MonsterViews.MonsterAttackView(); }
        private object Activate_86_MonsterAttacksView() { return new global::NestedWorld.View.MonsterViews.MonsterAttacksView(); }
        private object Activate_87_MonsterAttckList() { return new global::NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList(); }
        private object Activate_88_MonsterHeaderView() { return new global::NestedWorld.View.MonsterViews.MonsterHeaderView(); }
        private object Activate_89_MonsterStatsView() { return new global::NestedWorld.View.MonsterViews.MonsterStatsView(); }
        private object Activate_90_MonsterLocationView() { return new global::NestedWorld.View.MonsterViews.MonsterLocationView(); }
        private object Activate_91_ChartPalette() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartPalette(); }
        private object Activate_93_PaletteEntryCollection() { return new global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection(); }
        private object Activate_94_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>(); }
        private object Activate_96_RadPieChart() { return new global::Telerik.UI.Xaml.Controls.Chart.RadPieChart(); }
        private object Activate_103_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.PieSeries>(); }
        private object Activate_104_PieSeries() { return new global::Telerik.UI.Xaml.Controls.Chart.PieSeries(); }
        private object Activate_108_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.PieDataPoint>(); }
        private object Activate_109_PieDataPoint() { return new global::Telerik.Charting.PieDataPoint(); }
        private object Activate_121_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Style>(); }
        private object Activate_122_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Style>(); }
        private object Activate_124_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }
        private object Activate_125_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }
        private object Activate_126_ChartSeriesLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition(); }
        private object Activate_133_ChartSeriesProvider() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider(); }
        private object Activate_136_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>(); }
        private object Activate_140_DoughnutSeries() { return new global::Telerik.UI.Xaml.Controls.Chart.DoughnutSeries(); }
        private object Activate_141_PropertyNameDataPointBinding() { return new global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding(); }
        private object Activate_142_SettingsView() { return new global::NestedWorld.View.SettingsViews.SettingsView(); }
        private object Activate_143_ShopGroupeListView() { return new global::NestedWorld.View.ShopViews.ShopGroupeListView(); }
        private object Activate_144_ShopElementInformation() { return new global::NestedWorld.View.ShopViews.ShopElementInformation(); }
        private object Activate_145_ItemEffectView() { return new global::NestedWorld.View.ShopViews.ItemEffectView(); }
        private object Activate_146_ShopItemView() { return new global::NestedWorld.View.ShopViews.ShopItemView(); }
        private object Activate_147_ShopElementListView() { return new global::NestedWorld.View.ShopViews.ShopElementListView(); }
        private object Activate_148_ShopGroupeView() { return new global::NestedWorld.View.ShopViews.ShopGroupeView(); }
        private object Activate_149_ShopMainView() { return new global::NestedWorld.View.ShopViews.ShopMainView(); }
        private object Activate_150_AllyView() { return new global::NestedWorld.View.UserViews.AllyView(); }
        private object Activate_153_D2DTextStyle() { return new global::Telerik.UI.Drawing.D2DTextStyle(); }
        private object Activate_157_D2DShapeStyle() { return new global::Telerik.UI.Drawing.D2DShapeStyle(); }
        private object Activate_158_D2DSolidColorBrush() { return new global::Telerik.UI.Drawing.D2DSolidColorBrush(); }
        private object Activate_159_ChartAnnotationLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition(); }
        private object Activate_161_AngledHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition(); }
        private object Activate_164_FlatLooseHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition(); }
        private object Activate_165_FlatTightHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition(); }
        private object Activate_166_HighlightStyle() { return new global::Telerik.UI.Xaml.Controls.Input.HighlightStyle(); }
        private object Activate_169_CalendarCellStyle() { return new global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle(); }
        private object Activate_170_RadRadialMenu() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu(); }
        private object Activate_171_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>(); }
        private object Activate_172_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>(); }
        private object Activate_173_RadialMenuItem() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem(); }
        private object Activate_182_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>(); }
        private object Activate_183_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>(); }
        private object Activate_186_RadialMenuTriggerBehavior() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior(); }
        private object Activate_189_BusyIndicatorAnimationAdapter() { return new global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter(); }
        private void VectorAdd_94_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Brush>)instance;
            var newItem = (global::Windows.UI.Xaml.Media.Brush)item;
            collection.Add(newItem);
        }
        private void VectorAdd_101_PieSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.PieSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_102_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.PieSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_103_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.PieSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_107_ElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.PieDataPoint>)instance;
            var newItem = (global::Telerik.Charting.PieDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_108_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.PieDataPoint>)instance;
            var newItem = (global::Telerik.Charting.PieDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_121_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Style>)instance;
            var newItem = (global::Windows.UI.Xaml.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_122_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Style>)instance;
            var newItem = (global::Windows.UI.Xaml.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_124_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_125_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_135_ChartBehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_136_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_171_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_172_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_180_CommandCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_181_AttachableObjectCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_182_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_183_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Windows.UI.Color
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 1:   //  System.ValueType
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 2:   //  Object
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Byte
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  NestedWorld.MainPage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_4_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  NestedWorld.View.BattleViews.BattleCanvas
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_BattleCanvas;
                userType.AddMemberName("core");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  NestedWorld.Classes.ElementsGame.Battle.BattleCore
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  NestedWorld.View.BattleViews.EnemieMonster
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_EnemieMonster;
                userType.AddMemberName("MonsterImage");
                userType.AddMemberName("MonsterName");
                userType.AddMemberName("MonsterLevel");
                userType.AddMemberName("MonsterLife");
                userType.AddMemberName("monster");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  String
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Int32
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  NestedWorld.Classes.ElementsGame.Monsters.UserMonster
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("NestedWorld.Classes.ElementsGame.Monsters.Monster"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  NestedWorld.Classes.ElementsGame.Monsters.Monster
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  NestedWorld.View.BattleViews.AnnimationCanvas
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_14_AnnimationCanvas;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  NestedWorld.View.BattleViews.UserMonster
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_UserMonster;
                userType.AddMemberName("MonsterImage");
                userType.AddMemberName("MonsterName");
                userType.AddMemberName("MonsterLevel");
                userType.AddMemberName("MonsterLife");
                userType.AddMemberName("monster");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  NestedWorld.View.BattleViews.UserMonsterList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_UserMonsterList;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  NestedWorld.Pages.BattlePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_BattlePage;
                userType.AddMemberName("Core");
                userType.AddMemberName("Annimation");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  NestedWorld.View.ChatViews.ChanelListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_ChanelListView;
                userType.AddMemberName("listView");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Xaml.Controls.ListView
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  NestedWorld.View.ChatViews.StartNewChatView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_StartNewChatView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  NestedWorld.View.ChatViews.ChatView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_ChatView;
                userType.AddMemberName("channel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  NestedWorld.Classes.Chat.Channel
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  NestedWorld.Pages.ChatPage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_ChatPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  NestedWorld.Style.TabHeader
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_24_TabHeader;
                userType.AddMemberName("Icon");
                userType.AddMemberName("isSelect");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Media.Geometry
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Boolean
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  NestedWorld.View.ShopView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_ShopView;
                userType.AddMemberName("shop");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  NestedWorld.Classes.ElementsGame.Shop.Shop
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  NestedWorld.View.MonsterListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_29_MonsterListView;
                userType.AddMemberName("monsterList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  NestedWorld.Classes.ElementsGame.Monsters.MonsterList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  NestedWorld.View.MonsterViews.MonsterFullView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_31_MonsterFullView;
                userType.AddMemberName("monsterToDisplay");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  NestedWorld.View.MapView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_32_MapView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  NestedWorld.View.GardenView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_33_GardenView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  NestedWorld.View.HomeView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_34_HomeView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  NestedWorld.View.MonsterView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_35_MonsterView;
                userType.AddMemberName("monsterList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  NestedWorld.View.UserView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_36_UserView;
                userType.AddMemberName("userList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  NestedWorld.Classes.ElementsGame.Users.UserList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  NestedWorld.Pages.HomePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_HomePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  NestedWorld.Pages.MonsterPage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_MonsterPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  NestedWorld.View.PrepareBattleView.UsersProfileEntrance
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_40_UsersProfileEntrance;
                userType.AddMemberName("UserBackground");
                userType.AddMemberName("EnemieBackground");
                userType.AddMemberName("UserImage");
                userType.AddMemberName("EnemieImage");
                userType.AddMemberName("UserLevel");
                userType.AddMemberName("EnemieLevel");
                userType.AddMemberName("UserName");
                userType.AddMemberName("EnemieName");
                userType.AddMemberName("User");
                userType.AddMemberName("Enemie");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  NestedWorld.Classes.ElementsGame.GameCore.UserInfo
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  NestedWorld.Classes.ElementsGame.Users.User
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  NestedWorld.View.PrepareBattleView.UserMonsterListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_43_UserMonsterListView;
                userType.AddMemberName("monsterList");
                userType.AddMemberName("SelectedMonsterList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  NestedWorld.Pages.PrepareBattlePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_PrepareBattlePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  NestedWorld.View.ProfileViews.MainView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_45_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  NestedWorld.View.ProfileViews.MonsterStat
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_46_MonsterStat;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  NestedWorld.View.ProfileViews.StatiUserView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_StatiUserView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  NestedWorld.Pages.ProfilePage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_ProfilePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  NestedWorld.Pages.SettingsPage
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  NestedWorld.PopUp.CatchAreaProposition
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_50_CatchAreaProposition;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  NestedWorld.PopUp.ForgotPassPopUp
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_51_ForgotPassPopUp;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  NestedWorld.PopUp.MonsterNearPopUp
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_52_MonsterNearPopUp;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  NestedWorld.PopUp.NewBattlePopUp
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  NestedWorld.PopUp.RegisterPopUp
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_54_RegisterPopUp;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  NestedWorld.PopUp.SettingsPopUp
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_55_SettingsPopUp;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  NestedWorld.Style.TabHeaderMap
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_56_TabHeaderMap;
                userType.AddMemberName("isSelect");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  NestedWorld.View.BattleViews.BattleIcon
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("ImageItem");
                userType.AddMemberName("left");
                userType.AddMemberName("top");
                userType.AddMemberName("IsActive");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  Double
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  NestedWorld.View.ChatViews.ChanelView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_59_ChanelView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  NestedWorld.Classes.Chat.MessageContentPresenter
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_60_MessageContentPresenter;
                userType.AddMemberName("RightTemplate");
                userType.AddMemberName("LeftTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 63:   //  NestedWorld.View.ChatViews.MeMessageTemplate
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_63_MeMessageTemplate;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 64:   //  NestedWorld.View.ChatViews.YouMessageTemplate
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_64_YouMessageTemplate;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  NestedWorld.View.GardenViews.GardenElementListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_65_GardenElementListView;
                userType.AddMemberName("listView");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  Windows.UI.Xaml.Controls.GridView
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 67:   //  NestedWorld.View.GardenViews.GardenElementView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_67_GardenElementView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 68:   //  NestedWorld.View.GardenViews.GardenItem
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_68_GardenItem;
                userType.AddMemberName("ImageItem");
                userType.AddMemberName("time");
                userType.AddMemberName("left");
                userType.AddMemberName("top");
                userType.AddMemberName("element");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 69:   //  NestedWorld.Classes.Garden.GardenElement
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  NestedWorld.View.NotificationView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_70_NotificationView;
                userType.AddMemberName("NotificationNumber");
                userType.AddMemberName("Tap");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 71:   //  Windows.UI.Xaml.Input.TappedEventHandler
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 72:   //  NestedWorld.View.MapPoint.MonsterMapPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_72_MonsterMapPoint;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  NestedWorld.View.MapPoint.PlayerMapPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_73_PlayerMapPoint;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  NestedWorld.View.MapPoint.UserMapPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_74_UserMapPoint;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  NestedWorld.View.MapViews.MapControlView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_75_MapControlView;
                userType.AddMemberName("mapControl");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 76:   //  Windows.UI.Xaml.Controls.Maps.MapControl
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 77:   //  NestedWorld.View.MapViews.MapListElement
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_77_MapListElement;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 78:   //  NestedWorld.View.MapViews.MonsterMapList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_78_MonsterMapList;
                userType.AddMemberName("root");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 79:   //  Windows.UI.Xaml.Controls.StackPanel
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 80:   //  NestedWorld.View.MapViews.UserMapList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_80_UserMapList;
                userType.AddMemberName("root");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 81:   //  NestedWorld.View.MonsterViews.MonsterView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_81_MonsterView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 82:   //  NestedWorld.View.MonsterSoloView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_82_MonsterSoloView;
                userType.AddMemberName("MonsterName");
                userType.AddMemberName("Level");
                userType.AddMemberName("MonsterImage");
                userType.AddMemberName("Type");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("userMonster");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 83:   //  NestedWorld.Classes.ElementsGame.TypeEnum
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("FIRE", global::NestedWorld.Classes.ElementsGame.TypeEnum.FIRE);
                userType.AddEnumValue("WATHER", global::NestedWorld.Classes.ElementsGame.TypeEnum.WATHER);
                userType.AddEnumValue("GRASS", global::NestedWorld.Classes.ElementsGame.TypeEnum.GRASS);
                userType.AddEnumValue("DIRT", global::NestedWorld.Classes.ElementsGame.TypeEnum.DIRT);
                userType.AddEnumValue("ELEC", global::NestedWorld.Classes.ElementsGame.TypeEnum.ELEC);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 84:   //  System.Enum
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 85:   //  NestedWorld.View.MonsterViews.MonsterAttackView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_85_MonsterAttackView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 86:   //  NestedWorld.View.MonsterViews.MonsterAttacksView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_86_MonsterAttacksView;
                userType.AddMemberName("monsterAttackList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 87:   //  NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 88:   //  NestedWorld.View.MonsterViews.MonsterHeaderView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_88_MonsterHeaderView;
                userType.AddMemberName("MonsterName");
                userType.AddMemberName("MonsterImage");
                userType.AddMemberName("MonsterType");
                userType.AddMemberName("MonsterCombat");
                userType.AddMemberName("MonsterLevel");
                userType.AddMemberName("MonsterVictory");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 89:   //  NestedWorld.View.MonsterViews.MonsterStatsView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_89_MonsterStatsView;
                userType.AddMemberName("Life");
                userType.AddMemberName("Exp");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 90:   //  NestedWorld.View.MonsterViews.MonsterLocationView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_90_MonsterLocationView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 91:   //  Telerik.UI.Xaml.Controls.Chart.ChartPalette
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_91_ChartPalette;
                userType.AddMemberName("FillEntries");
                userType.AddMemberName("StrokeEntries");
                userType.AddMemberName("Name");
                userType.AddMemberName("SpecialFillEntries");
                userType.AddMemberName("SpecialStrokeEntries");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 92:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 93:   //  Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_93_PaletteEntryCollection;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes");
                userType.AddMemberName("Brushes");
                userType.AddMemberName("SeriesFamily");
                xamlType = userType;
                break;

            case 94:   //  System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_94_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 95:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 96:   //  Telerik.UI.Xaml.Controls.Chart.RadPieChart
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase"));
                userType.Activator = Activate_96_RadPieChart;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.RadPieChart.Series");
                userType.AddMemberName("Series");
                xamlType = userType;
                break;

            case 97:   //  Telerik.UI.Xaml.Controls.Chart.RadChartBase
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("ClipToBounds");
                userType.AddMemberName("Palette");
                userType.AddMemberName("SeriesProvider");
                userType.AddMemberName("EmptyContent");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("PlotAreaStyle");
                userType.AddMemberName("PaletteName");
                userType.AddMemberName("SelectionPalette");
                userType.AddMemberName("SelectionPaletteName");
                userType.AddMemberName("Behaviors");
                userType.AddMemberName("Zoom");
                userType.AddMemberName("MaxZoom");
                userType.AddMemberName("MinZoom");
                userType.AddMemberName("PlotOrigin");
                userType.AddMemberName("PlotAreaClip");
                userType.AddMemberName("ScrollOffset");
                xamlType = userType;
                break;

            case 98:   //  Telerik.UI.Xaml.Controls.Chart.PresenterBase
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                xamlType = userType;
                break;

            case 99:   //  Telerik.UI.Xaml.Controls.RadControl
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                xamlType = userType;
                break;

            case 100:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 101:   //  Telerik.UI.Xaml.Controls.Chart.PieSeriesCollection
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.PieSeries>"));
                userType.CollectionAdd = VectorAdd_101_PieSeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.PieSeries>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.PieSeries>"));
                userType.CollectionAdd = VectorAdd_102_PresenterCollection;
                xamlType = userType;
                break;

            case 103:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.PieSeries>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_103_Collection;
                userType.CollectionAdd = VectorAdd_103_Collection;
                xamlType = userType;
                break;

            case 104:   //  Telerik.UI.Xaml.Controls.Chart.PieSeries
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.Activator = Activate_104_PieSeries;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.PieSeries.DataPoints");
                userType.AddMemberName("DataPoints");
                userType.AddMemberName("HighlightInnerRadiusFactor");
                userType.AddMemberName("HighlightBrush");
                userType.AddMemberName("DefaultSegmentStyle");
                userType.AddMemberName("SelectedPointOffset");
                userType.AddMemberName("ValueBinding");
                userType.AddMemberName("LegendTitleBinding");
                userType.AddMemberName("IsVisibleInLegendBinding");
                userType.AddMemberName("SegmentStyleSelector");
                userType.AddMemberName("RadiusFactor");
                userType.AddMemberName("SegmentStyles");
                userType.AddMemberName("AngleRange");
                xamlType = userType;
                break;

            case 105:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeries
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("AllowSelect");
                userType.AddMemberName("PaletteIndex");
                userType.AddMemberName("LabelDefinitions");
                userType.AddMemberName("IsSelectedBinding");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("ClipToPlotArea");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ActualPaletteIndex");
                xamlType = userType;
                break;

            case 106:   //  Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("ZIndex");
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case 107:   //  Telerik.Core.ElementCollection`1<Telerik.Charting.PieDataPoint>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.Charting.PieDataPoint>"));
                userType.CollectionAdd = VectorAdd_107_ElementCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 108:   //  System.Collections.ObjectModel.Collection`1<Telerik.Charting.PieDataPoint>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_108_Collection;
                userType.CollectionAdd = VectorAdd_108_Collection;
                xamlType = userType;
                break;

            case 109:   //  Telerik.Charting.PieDataPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Charting.SingleValueDataPoint"));
                userType.Activator = Activate_109_PieDataPoint;
                userType.AddMemberName("Percent");
                userType.AddMemberName("OffsetFromCenter");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("SweepAngle");
                xamlType = userType;
                break;

            case 110:   //  Telerik.Charting.SingleValueDataPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Charting.DataPoint"));
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 111:   //  Telerik.Charting.DataPoint
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.Node"));
                userType.AddMemberName("Label");
                userType.AddMemberName("DataItem");
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 112:   //  Telerik.Core.Node
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.PropertyBagObject"));
                userType.AddMemberName("Presenter");
                userType.AddMemberName("IsArrangeValid");
                userType.AddMemberName("NodeState");
                userType.AddMemberName("Index");
                userType.AddMemberName("CollectionIndex");
                userType.AddMemberName("IsTreeLoaded");
                userType.AddMemberName("LayoutSlot");
                userType.AddMemberName("Parent");
                xamlType = userType;
                break;

            case 113:   //  Telerik.Core.PropertyBagObject
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 114:   //  Telerik.Core.IElementPresenter
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 115:   //  Telerik.Core.NodeState
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Initial", global::Telerik.Core.NodeState.Initial);
                userType.AddEnumValue("Loading", global::Telerik.Core.NodeState.Loading);
                userType.AddEnumValue("Loaded", global::Telerik.Core.NodeState.Loaded);
                userType.AddEnumValue("Unloading", global::Telerik.Core.NodeState.Unloading);
                userType.AddEnumValue("Unloaded", global::Telerik.Core.NodeState.Unloaded);
                xamlType = userType;
                break;

            case 116:   //  Telerik.Core.RadRect
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 117:   //  Telerik.Core.Element
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.Node"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 118:   //  Windows.UI.Xaml.Style
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 119:   //  Telerik.UI.Xaml.Controls.Chart.DataPointBinding
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 120:   //  Windows.UI.Xaml.Controls.StyleSelector
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 121:   //  System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.Style>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Style>"));
                userType.CollectionAdd = VectorAdd_121_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 122:   //  System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Style>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_122_Collection;
                userType.CollectionAdd = VectorAdd_122_Collection;
                xamlType = userType;
                break;

            case 123:   //  Telerik.Charting.AngleRange
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 124:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>"));
                userType.CollectionAdd = VectorAdd_124_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 125:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_125_Collection;
                userType.CollectionAdd = VectorAdd_125_Collection;
                xamlType = userType;
                break;

            case 126:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_126_ChartSeriesLabelDefinition;
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("Template");
                userType.AddMemberName("Binding");
                userType.AddMemberName("Format");
                userType.AddMemberName("Margin");
                userType.AddMemberName("TemplateSelector");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Strategy");
                xamlType = userType;
                break;

            case 127:   //  Windows.UI.Xaml.HorizontalAlignment
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 128:   //  Windows.UI.Xaml.VerticalAlignment
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 129:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 130:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 131:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 132:   //  System.Collections.IEnumerable
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 133:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 134:   //  Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.None);
                userType.AddEnumValue("DefaultDark", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDark);
                userType.AddEnumValue("DefaultLight", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLight);
                userType.AddEnumValue("DefaultDarkSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDarkSelected);
                userType.AddEnumValue("DefaultLightSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLightSelected);
                xamlType = userType;
                break;

            case 135:   //  Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>"));
                userType.CollectionAdd = VectorAdd_135_ChartBehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 136:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_136_Collection;
                userType.CollectionAdd = VectorAdd_136_Collection;
                xamlType = userType;
                break;

            case 137:   //  Telerik.UI.Xaml.Controls.Chart.ChartBehavior
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case 138:   //  Windows.Foundation.Size
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 139:   //  Windows.Foundation.Point
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 140:   //  Telerik.UI.Xaml.Controls.Chart.DoughnutSeries
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries"));
                userType.Activator = Activate_140_DoughnutSeries;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.PieSeries.DataPoints");
                userType.AddMemberName("InnerRadiusFactor");
                xamlType = userType;
                break;

            case 141:   //  Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.DataPointBinding"));
                userType.Activator = Activate_141_PropertyNameDataPointBinding;
                userType.AddMemberName("PropertyName");
                xamlType = userType;
                break;

            case 142:   //  NestedWorld.View.SettingsViews.SettingsView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_142_SettingsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 143:   //  NestedWorld.View.ShopViews.ShopGroupeListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_143_ShopGroupeListView;
                userType.AddMemberName("listView");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 144:   //  NestedWorld.View.ShopViews.ShopElementInformation
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_144_ShopElementInformation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 145:   //  NestedWorld.View.ShopViews.ItemEffectView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_145_ItemEffectView;
                userType.AddMemberName("NameEffect");
                userType.AddMemberName("LevelEffect");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 146:   //  NestedWorld.View.ShopViews.ShopItemView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_146_ShopItemView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 147:   //  NestedWorld.View.ShopViews.ShopElementListView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_147_ShopElementListView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 148:   //  NestedWorld.View.ShopViews.ShopGroupeView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_148_ShopGroupeView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 149:   //  NestedWorld.View.ShopViews.ShopMainView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_149_ShopMainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 150:   //  NestedWorld.View.UserViews.AllyView
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_150_AllyView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 151:   //  Telerik.UI.Drawing.D2DResource
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 152:   //  Telerik.UI.Drawing.D2DBrush
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Drawing.D2DResource"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 153:   //  Telerik.UI.Drawing.D2DTextStyle
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_153_D2DTextStyle;
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontLocale");
                userType.AddMemberName("FontName");
                userType.AddMemberName("TextAlignment");
                userType.AddMemberName("FontStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 154:   //  Telerik.UI.Drawing.FontWeightName
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Drawing.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Drawing.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Drawing.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Drawing.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Drawing.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Drawing.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Drawing.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Drawing.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Drawing.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Drawing.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Drawing.FontWeightName.Thin);
                xamlType = userType;
                break;

            case 155:   //  Windows.UI.Xaml.TextAlignment
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 156:   //  Windows.UI.Text.FontStyle
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 157:   //  Telerik.UI.Drawing.D2DShapeStyle
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_157_D2DShapeStyle;
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("Fill");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 158:   //  Telerik.UI.Drawing.D2DSolidColorBrush
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Drawing.D2DBrush"));
                userType.Activator = Activate_158_D2DSolidColorBrush;
                userType.AddMemberName("Color");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 159:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_159_ChartAnnotationLabelDefinition;
                userType.AddMemberName("Format");
                userType.AddMemberName("Template");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Location");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("VerticalOffset");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 160:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Left);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Top);
                userType.AddEnumValue("Right", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Right);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Bottom);
                userType.AddEnumValue("Inside", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Inside);
                xamlType = userType;
                break;

            case 161:   //  Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_161_AngledHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 162:   //  Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ItemLength");
                userType.AddMemberName("ItemsSpacing");
                userType.AddMemberName("ViewPortExtension");
                xamlType = userType;
                break;

            case 163:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 164:   //  Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_164_FlatLooseHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 165:   //  Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_165_FlatTightHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 166:   //  Telerik.UI.Xaml.Controls.Input.HighlightStyle
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_166_HighlightStyle;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontSize");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 167:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 168:   //  Telerik.UI.Xaml.Controls.Input.FontWeightName
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Thin);
                xamlType = userType;
                break;

            case 169:   //  Telerik.UI.Xaml.Controls.Input.CalendarCellStyle
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_169_CalendarCellStyle;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("DecorationStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 170:   //  Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.Activator = Activate_170_RadRadialMenu;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("ShowToolTip");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("InnerNavigationRadiusFactor");
                userType.AddMemberName("InnerRadiusFactor");
                userType.AddMemberName("OuterRadiusFactor");
                userType.AddMemberName("ContentMenuBackgroundStyle");
                userType.AddMemberName("NavigationMenuBackgroundStyle");
                userType.AddMemberName("CommandService");
                userType.AddMemberName("Commands");
                userType.AddMemberName("TargetElement");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 171:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>"));
                userType.CollectionAdd = VectorAdd_171_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 172:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_172_Collection;
                userType.CollectionAdd = VectorAdd_172_Collection;
                xamlType = userType;
                break;

            case 173:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.Activator = Activate_173_RadialMenuItem;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ChildItems");
                userType.AddMemberName("ChildItems");
                userType.AddMemberName("ToolTipContent");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("Command");
                userType.AddMemberName("ParentItem");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("Selectable");
                userType.AddMemberName("Deselectable");
                userType.AddMemberName("Header");
                userType.AddMemberName("IconContent");
                userType.AddMemberName("ContentSectorBackground");
                xamlType = userType;
                break;

            case 174:   //  Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 175:   //  System.Windows.Input.ICommand
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 176:   //  Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 177:   //  Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 178:   //  Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 179:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 180:   //  Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.CollectionAdd = VectorAdd_180_CommandCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 181:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.CollectionAdd = VectorAdd_181_AttachableObjectCollection;
                xamlType = userType;
                break;

            case 182:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.Activator = Activate_182_ObservableCollection;
                userType.CollectionAdd = VectorAdd_182_ObservableCollection;
                xamlType = userType;
                break;

            case 183:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_183_Collection;
                userType.CollectionAdd = VectorAdd_183_Collection;
                xamlType = userType;
                break;

            case 184:   //  Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 185:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 186:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>"));
                userType.Activator = Activate_186_RadialMenuTriggerBehavior;
                userType.AddMemberName("AttachTriggers");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 187:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 188:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.None);
                userType.AddEnumValue("PointerPressed", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PointerPressed);
                userType.AddEnumValue("PointerOver", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PointerOver);
                userType.AddEnumValue("Focused", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.Focused);
                userType.AddEnumValue("PressedOrFocused", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PressedOrFocused);
                xamlType = userType;
                break;

            case 189:   //  Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter
                userType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_189_BusyIndicatorAnimationAdapter;
                userType.AddMemberName("Animation");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 190:   //  Windows.UI.Xaml.Media.Animation.Storyboard
                xamlType = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Data.DataControls_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Map.Map_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Facebook.FBSDK_UWP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_BattleCanvas_core(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleCanvas)instance;
            return that.core;
        }
        private void set_4_BattleCanvas_core(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleCanvas)instance;
            that.core = (global::NestedWorld.Classes.ElementsGame.Battle.BattleCore)Value;
        }
        private object get_5_EnemieMonster_MonsterImage(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            return that.MonsterImage;
        }
        private void set_5_EnemieMonster_MonsterImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            that.MonsterImage = (global::System.String)Value;
        }
        private object get_6_EnemieMonster_MonsterName(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            return that.MonsterName;
        }
        private void set_6_EnemieMonster_MonsterName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            that.MonsterName = (global::System.String)Value;
        }
        private object get_7_EnemieMonster_MonsterLevel(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            return that.MonsterLevel;
        }
        private void set_7_EnemieMonster_MonsterLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            that.MonsterLevel = (global::System.Int32)Value;
        }
        private object get_8_EnemieMonster_MonsterLife(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            return that.MonsterLife;
        }
        private void set_8_EnemieMonster_MonsterLife(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            that.MonsterLife = (global::System.Int32)Value;
        }
        private object get_9_EnemieMonster_monster(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            return that.monster;
        }
        private void set_9_EnemieMonster_monster(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.EnemieMonster)instance;
            that.monster = (global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster)Value;
        }
        private object get_10_UserMonster_MonsterImage(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            return that.MonsterImage;
        }
        private void set_10_UserMonster_MonsterImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            that.MonsterImage = (global::System.String)Value;
        }
        private object get_11_UserMonster_MonsterName(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            return that.MonsterName;
        }
        private void set_11_UserMonster_MonsterName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            that.MonsterName = (global::System.String)Value;
        }
        private object get_12_UserMonster_MonsterLevel(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            return that.MonsterLevel;
        }
        private void set_12_UserMonster_MonsterLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            that.MonsterLevel = (global::System.Int32)Value;
        }
        private object get_13_UserMonster_MonsterLife(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            return that.MonsterLife;
        }
        private void set_13_UserMonster_MonsterLife(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            that.MonsterLife = (global::System.Int32)Value;
        }
        private object get_14_UserMonster_monster(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            return that.monster;
        }
        private void set_14_UserMonster_monster(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.UserMonster)instance;
            that.monster = (global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster)Value;
        }
        private object get_15_BattlePage_Core(object instance)
        {
            var that = (global::NestedWorld.Pages.BattlePage)instance;
            return that.Core;
        }
        private void set_15_BattlePage_Core(object instance, object Value)
        {
            var that = (global::NestedWorld.Pages.BattlePage)instance;
            that.Core = (global::NestedWorld.Classes.ElementsGame.Battle.BattleCore)Value;
        }
        private object get_16_BattlePage_Annimation(object instance)
        {
            var that = (global::NestedWorld.Pages.BattlePage)instance;
            return that.Annimation;
        }
        private void set_16_BattlePage_Annimation(object instance, object Value)
        {
            var that = (global::NestedWorld.Pages.BattlePage)instance;
            that.Annimation = (global::NestedWorld.View.BattleViews.AnnimationCanvas)Value;
        }
        private object get_17_ChanelListView_listView(object instance)
        {
            var that = (global::NestedWorld.View.ChatViews.ChanelListView)instance;
            return that.listView;
        }
        private void set_17_ChanelListView_listView(object instance, object Value)
        {
            var that = (global::NestedWorld.View.ChatViews.ChanelListView)instance;
            that.listView = (global::Windows.UI.Xaml.Controls.ListView)Value;
        }
        private object get_18_ChatView_channel(object instance)
        {
            var that = (global::NestedWorld.View.ChatViews.ChatView)instance;
            return that.channel;
        }
        private void set_18_ChatView_channel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.ChatViews.ChatView)instance;
            that.channel = (global::NestedWorld.Classes.Chat.Channel)Value;
        }
        private object get_19_TabHeader_Icon(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            return that.Icon;
        }
        private void set_19_TabHeader_Icon(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            that.Icon = (global::Windows.UI.Xaml.Media.Geometry)Value;
        }
        private object get_20_TabHeader_isSelect(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            return that.isSelect;
        }
        private void set_20_TabHeader_isSelect(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeader)instance;
            that.isSelect = (global::System.Boolean)Value;
        }
        private object get_21_ShopView_shop(object instance)
        {
            var that = (global::NestedWorld.View.ShopView)instance;
            return that.shop;
        }
        private void set_21_ShopView_shop(object instance, object Value)
        {
            var that = (global::NestedWorld.View.ShopView)instance;
            that.shop = (global::NestedWorld.Classes.ElementsGame.Shop.Shop)Value;
        }
        private object get_22_MonsterListView_monsterList(object instance)
        {
            var that = (global::NestedWorld.View.MonsterListView)instance;
            return that.monsterList;
        }
        private void set_22_MonsterListView_monsterList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterListView)instance;
            that.monsterList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList)Value;
        }
        private object get_23_MonsterFullView_monsterToDisplay(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterFullView)instance;
            return that.monsterToDisplay;
        }
        private void set_23_MonsterFullView_monsterToDisplay(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterFullView)instance;
            that.monsterToDisplay = (global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster)Value;
        }
        private object get_24_MonsterView_monsterList(object instance)
        {
            var that = (global::NestedWorld.View.MonsterView)instance;
            return that.monsterList;
        }
        private void set_24_MonsterView_monsterList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterView)instance;
            that.monsterList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList)Value;
        }
        private object get_25_UserView_userList(object instance)
        {
            var that = (global::NestedWorld.View.UserView)instance;
            return that.userList;
        }
        private void set_25_UserView_userList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.UserView)instance;
            that.userList = (global::NestedWorld.Classes.ElementsGame.Users.UserList)Value;
        }
        private object get_26_UsersProfileEntrance_UserBackground(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.UserBackground;
        }
        private void set_26_UsersProfileEntrance_UserBackground(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.UserBackground = (global::System.String)Value;
        }
        private object get_27_UsersProfileEntrance_EnemieBackground(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.EnemieBackground;
        }
        private void set_27_UsersProfileEntrance_EnemieBackground(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.EnemieBackground = (global::System.String)Value;
        }
        private object get_28_UsersProfileEntrance_UserImage(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.UserImage;
        }
        private void set_28_UsersProfileEntrance_UserImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.UserImage = (global::System.String)Value;
        }
        private object get_29_UsersProfileEntrance_EnemieImage(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.EnemieImage;
        }
        private void set_29_UsersProfileEntrance_EnemieImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.EnemieImage = (global::System.String)Value;
        }
        private object get_30_UsersProfileEntrance_UserLevel(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.UserLevel;
        }
        private void set_30_UsersProfileEntrance_UserLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.UserLevel = (global::System.Int32)Value;
        }
        private object get_31_UsersProfileEntrance_EnemieLevel(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.EnemieLevel;
        }
        private void set_31_UsersProfileEntrance_EnemieLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.EnemieLevel = (global::System.Int32)Value;
        }
        private object get_32_UsersProfileEntrance_UserName(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.UserName;
        }
        private void set_32_UsersProfileEntrance_UserName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.UserName = (global::System.String)Value;
        }
        private object get_33_UsersProfileEntrance_EnemieName(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.EnemieName;
        }
        private void set_33_UsersProfileEntrance_EnemieName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.EnemieName = (global::System.String)Value;
        }
        private object get_34_UsersProfileEntrance_User(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.User;
        }
        private void set_34_UsersProfileEntrance_User(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.User = (global::NestedWorld.Classes.ElementsGame.GameCore.UserInfo)Value;
        }
        private object get_35_UsersProfileEntrance_Enemie(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            return that.Enemie;
        }
        private void set_35_UsersProfileEntrance_Enemie(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UsersProfileEntrance)instance;
            that.Enemie = (global::NestedWorld.Classes.ElementsGame.Users.User)Value;
        }
        private object get_36_UserMonsterListView_monsterList(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UserMonsterListView)instance;
            return that.monsterList;
        }
        private void set_36_UserMonsterListView_monsterList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UserMonsterListView)instance;
            that.monsterList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterList)Value;
        }
        private object get_37_UserMonsterListView_SelectedMonsterList(object instance)
        {
            var that = (global::NestedWorld.View.PrepareBattleView.UserMonsterListView)instance;
            return that.SelectedMonsterList;
        }
        private object get_38_TabHeaderMap_isSelect(object instance)
        {
            var that = (global::NestedWorld.Style.TabHeaderMap)instance;
            return that.isSelect;
        }
        private void set_38_TabHeaderMap_isSelect(object instance, object Value)
        {
            var that = (global::NestedWorld.Style.TabHeaderMap)instance;
            that.isSelect = (global::System.Boolean)Value;
        }
        private object get_39_BattleIcon_ImageItem(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            return that.ImageItem;
        }
        private void set_39_BattleIcon_ImageItem(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            that.ImageItem = (global::System.String)Value;
        }
        private object get_40_BattleIcon_left(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            return that.left;
        }
        private void set_40_BattleIcon_left(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            that.left = (global::System.Double)Value;
        }
        private object get_41_BattleIcon_top(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            return that.top;
        }
        private void set_41_BattleIcon_top(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            that.top = (global::System.Double)Value;
        }
        private object get_42_BattleIcon_IsActive(object instance)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            return that.IsActive;
        }
        private void set_42_BattleIcon_IsActive(object instance, object Value)
        {
            var that = (global::NestedWorld.View.BattleViews.BattleIcon)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_43_MessageContentPresenter_RightTemplate(object instance)
        {
            var that = (global::NestedWorld.Classes.Chat.MessageContentPresenter)instance;
            return that.RightTemplate;
        }
        private void set_43_MessageContentPresenter_RightTemplate(object instance, object Value)
        {
            var that = (global::NestedWorld.Classes.Chat.MessageContentPresenter)instance;
            that.RightTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_44_MessageContentPresenter_LeftTemplate(object instance)
        {
            var that = (global::NestedWorld.Classes.Chat.MessageContentPresenter)instance;
            return that.LeftTemplate;
        }
        private void set_44_MessageContentPresenter_LeftTemplate(object instance, object Value)
        {
            var that = (global::NestedWorld.Classes.Chat.MessageContentPresenter)instance;
            that.LeftTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_45_GardenElementListView_listView(object instance)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenElementListView)instance;
            return that.listView;
        }
        private void set_45_GardenElementListView_listView(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenElementListView)instance;
            that.listView = (global::Windows.UI.Xaml.Controls.GridView)Value;
        }
        private object get_46_GardenItem_ImageItem(object instance)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            return that.ImageItem;
        }
        private void set_46_GardenItem_ImageItem(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            that.ImageItem = (global::System.String)Value;
        }
        private object get_47_GardenItem_time(object instance)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            return that.time;
        }
        private void set_47_GardenItem_time(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            that.time = (global::System.Double)Value;
        }
        private object get_48_GardenItem_left(object instance)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            return that.left;
        }
        private void set_48_GardenItem_left(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            that.left = (global::System.Double)Value;
        }
        private object get_49_GardenItem_top(object instance)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            return that.top;
        }
        private void set_49_GardenItem_top(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            that.top = (global::System.Double)Value;
        }
        private object get_50_GardenItem_element(object instance)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            return that.element;
        }
        private void set_50_GardenItem_element(object instance, object Value)
        {
            var that = (global::NestedWorld.View.GardenViews.GardenItem)instance;
            that.element = (global::NestedWorld.Classes.Garden.GardenElement)Value;
        }
        private object get_51_NotificationView_NotificationNumber(object instance)
        {
            var that = (global::NestedWorld.View.NotificationView)instance;
            return that.NotificationNumber;
        }
        private void set_51_NotificationView_NotificationNumber(object instance, object Value)
        {
            var that = (global::NestedWorld.View.NotificationView)instance;
            that.NotificationNumber = (global::System.Int32)Value;
        }
        private object get_52_NotificationView_Tap(object instance)
        {
            var that = (global::NestedWorld.View.NotificationView)instance;
            return that.Tap;
        }
        private object get_53_MapControlView_mapControl(object instance)
        {
            var that = (global::NestedWorld.View.MapViews.MapControlView)instance;
            return that.mapControl;
        }
        private void set_53_MapControlView_mapControl(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MapViews.MapControlView)instance;
            that.mapControl = (global::Windows.UI.Xaml.Controls.Maps.MapControl)Value;
        }
        private object get_54_MonsterMapList_root(object instance)
        {
            var that = (global::NestedWorld.View.MapViews.MonsterMapList)instance;
            return that.root;
        }
        private object get_55_UserMapList_root(object instance)
        {
            var that = (global::NestedWorld.View.MapViews.UserMapList)instance;
            return that.root;
        }
        private object get_56_MonsterSoloView_MonsterName(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.MonsterName;
        }
        private void set_56_MonsterSoloView_MonsterName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.MonsterName = (global::System.String)Value;
        }
        private object get_57_MonsterSoloView_Level(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.Level;
        }
        private void set_57_MonsterSoloView_Level(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.Level = (global::System.String)Value;
        }
        private object get_58_MonsterSoloView_MonsterImage(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.MonsterImage;
        }
        private void set_58_MonsterSoloView_MonsterImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.MonsterImage = (global::System.String)Value;
        }
        private object get_59_MonsterSoloView_Type(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.Type;
        }
        private void set_59_MonsterSoloView_Type(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.Type = (global::NestedWorld.Classes.ElementsGame.TypeEnum)Value;
        }
        private object get_60_MonsterSoloView_BackgroundColor(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.BackgroundColor;
        }
        private void set_60_MonsterSoloView_BackgroundColor(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.BackgroundColor = (global::System.String)Value;
        }
        private object get_61_MonsterSoloView_userMonster(object instance)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            return that.userMonster;
        }
        private void set_61_MonsterSoloView_userMonster(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterSoloView)instance;
            that.userMonster = (global::NestedWorld.Classes.ElementsGame.Monsters.UserMonster)Value;
        }
        private object get_62_MonsterAttacksView_monsterAttackList(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterAttacksView)instance;
            return that.monsterAttackList;
        }
        private void set_62_MonsterAttacksView_monsterAttackList(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterAttacksView)instance;
            that.monsterAttackList = (global::NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList)Value;
        }
        private object get_63_MonsterHeaderView_MonsterName(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterName;
        }
        private void set_63_MonsterHeaderView_MonsterName(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterName = (global::System.String)Value;
        }
        private object get_64_MonsterHeaderView_MonsterImage(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterImage;
        }
        private void set_64_MonsterHeaderView_MonsterImage(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterImage = (global::System.String)Value;
        }
        private object get_65_MonsterHeaderView_MonsterType(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterType;
        }
        private void set_65_MonsterHeaderView_MonsterType(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterType = (global::NestedWorld.Classes.ElementsGame.TypeEnum)Value;
        }
        private object get_66_MonsterHeaderView_MonsterCombat(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterCombat;
        }
        private void set_66_MonsterHeaderView_MonsterCombat(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterCombat = (global::System.Int32)Value;
        }
        private object get_67_MonsterHeaderView_MonsterLevel(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterLevel;
        }
        private void set_67_MonsterHeaderView_MonsterLevel(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterLevel = (global::System.Int32)Value;
        }
        private object get_68_MonsterHeaderView_MonsterVictory(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            return that.MonsterVictory;
        }
        private void set_68_MonsterHeaderView_MonsterVictory(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterHeaderView)instance;
            that.MonsterVictory = (global::System.Int32)Value;
        }
        private object get_69_MonsterStatsView_Life(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            return that.Life;
        }
        private void set_69_MonsterStatsView_Life(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            that.Life = (global::System.Int32)Value;
        }
        private object get_70_MonsterStatsView_Exp(object instance)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            return that.Exp;
        }
        private void set_70_MonsterStatsView_Exp(object instance, object Value)
        {
            var that = (global::NestedWorld.View.MonsterViews.MonsterStatsView)instance;
            that.Exp = (global::System.Int32)Value;
        }
        private object get_71_ChartPalette_FillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.FillEntries;
        }
        private void set_71_ChartPalette_FillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.FillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_72_PaletteEntryCollection_Brushes(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)instance;
            return that.Brushes;
        }
        private object get_73_ChartPalette_StrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.StrokeEntries;
        }
        private void set_73_ChartPalette_StrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.StrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_74_ChartPalette_Name(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.Name;
        }
        private void set_74_ChartPalette_Name(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_75_ChartPalette_SpecialFillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialFillEntries;
        }
        private void set_75_ChartPalette_SpecialFillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialFillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_76_ChartPalette_SpecialStrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialStrokeEntries;
        }
        private void set_76_ChartPalette_SpecialStrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialStrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_77_PaletteEntryCollection_SeriesFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)instance;
            return that.SeriesFamily;
        }
        private void set_77_PaletteEntryCollection_SeriesFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)instance;
            that.SeriesFamily = (global::System.String)Value;
        }
        private object get_78_RadPieChart_Series(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadPieChart)instance;
            return that.Series;
        }
        private object get_79_PieSeries_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.DataPoints;
        }
        private object get_80_PieDataPoint_Percent(object instance)
        {
            var that = (global::Telerik.Charting.PieDataPoint)instance;
            return that.Percent;
        }
        private object get_81_PieDataPoint_OffsetFromCenter(object instance)
        {
            var that = (global::Telerik.Charting.PieDataPoint)instance;
            return that.OffsetFromCenter;
        }
        private void set_81_PieDataPoint_OffsetFromCenter(object instance, object Value)
        {
            var that = (global::Telerik.Charting.PieDataPoint)instance;
            that.OffsetFromCenter = (global::System.Double)Value;
        }
        private object get_82_PieDataPoint_StartAngle(object instance)
        {
            var that = (global::Telerik.Charting.PieDataPoint)instance;
            return that.StartAngle;
        }
        private object get_83_PieDataPoint_SweepAngle(object instance)
        {
            var that = (global::Telerik.Charting.PieDataPoint)instance;
            return that.SweepAngle;
        }
        private object get_84_SingleValueDataPoint_Value(object instance)
        {
            var that = (global::Telerik.Charting.SingleValueDataPoint)instance;
            return that.Value;
        }
        private void set_84_SingleValueDataPoint_Value(object instance, object Value)
        {
            var that = (global::Telerik.Charting.SingleValueDataPoint)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_85_DataPoint_Label(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.Label;
        }
        private void set_85_DataPoint_Label(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.Label = (global::System.Object)Value;
        }
        private object get_86_DataPoint_DataItem(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.DataItem;
        }
        private object get_87_DataPoint_IsSelected(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.IsSelected;
        }
        private void set_87_DataPoint_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_88_Node_Presenter(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Presenter;
        }
        private object get_89_Node_IsArrangeValid(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.IsArrangeValid;
        }
        private object get_90_Node_NodeState(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.NodeState;
        }
        private object get_91_Node_Index(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Index;
        }
        private object get_92_Node_CollectionIndex(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.CollectionIndex;
        }
        private object get_93_Node_IsTreeLoaded(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.IsTreeLoaded;
        }
        private object get_94_Node_LayoutSlot(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.LayoutSlot;
        }
        private object get_95_Node_Parent(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Parent;
        }
        private object get_96_PieSeries_HighlightInnerRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.HighlightInnerRadiusFactor;
        }
        private void set_96_PieSeries_HighlightInnerRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.HighlightInnerRadiusFactor = (global::System.Double)Value;
        }
        private object get_97_PieSeries_HighlightBrush(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.HighlightBrush;
        }
        private void set_97_PieSeries_HighlightBrush(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.HighlightBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_98_PieSeries_DefaultSegmentStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.DefaultSegmentStyle;
        }
        private void set_98_PieSeries_DefaultSegmentStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.DefaultSegmentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_99_PieSeries_SelectedPointOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.SelectedPointOffset;
        }
        private void set_99_PieSeries_SelectedPointOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.SelectedPointOffset = (global::System.Double)Value;
        }
        private object get_100_PieSeries_ValueBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.ValueBinding;
        }
        private void set_100_PieSeries_ValueBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.ValueBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_101_PieSeries_LegendTitleBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.LegendTitleBinding;
        }
        private void set_101_PieSeries_LegendTitleBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.LegendTitleBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_102_PieSeries_IsVisibleInLegendBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.IsVisibleInLegendBinding;
        }
        private void set_102_PieSeries_IsVisibleInLegendBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.IsVisibleInLegendBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_103_PieSeries_SegmentStyleSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.SegmentStyleSelector;
        }
        private void set_103_PieSeries_SegmentStyleSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.SegmentStyleSelector = (global::Windows.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_104_PieSeries_RadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.RadiusFactor;
        }
        private void set_104_PieSeries_RadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.RadiusFactor = (global::System.Double)Value;
        }
        private object get_105_PieSeries_SegmentStyles(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.SegmentStyles;
        }
        private object get_106_PieSeries_AngleRange(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            return that.AngleRange;
        }
        private void set_106_PieSeries_AngleRange(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PieSeries)instance;
            that.AngleRange = (global::Telerik.Charting.AngleRange)Value;
        }
        private object get_107_ChartSeries_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelected;
        }
        private void set_107_ChartSeries_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_108_ChartSeries_AllowSelect(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.AllowSelect;
        }
        private void set_108_ChartSeries_AllowSelect(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.AllowSelect = (global::System.Boolean)Value;
        }
        private object get_109_ChartSeries_PaletteIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.PaletteIndex;
        }
        private void set_109_ChartSeries_PaletteIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.PaletteIndex = (global::System.Int32)Value;
        }
        private object get_110_ChartSeries_LabelDefinitions(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.LabelDefinitions;
        }
        private object get_111_ChartSeriesLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_111_ChartSeriesLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_112_ChartSeriesLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_112_ChartSeriesLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_113_ChartSeriesLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Template;
        }
        private void set_113_ChartSeriesLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_114_ChartSeriesLabelDefinition_Binding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Binding;
        }
        private void set_114_ChartSeriesLabelDefinition_Binding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Binding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_115_ChartSeriesLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Format;
        }
        private void set_115_ChartSeriesLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_116_ChartSeriesLabelDefinition_Margin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Margin;
        }
        private void set_116_ChartSeriesLabelDefinition_Margin(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Margin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_117_ChartSeriesLabelDefinition_TemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.TemplateSelector;
        }
        private void set_117_ChartSeriesLabelDefinition_TemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.TemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_118_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_118_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_119_ChartSeriesLabelDefinition_Strategy(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Strategy;
        }
        private void set_119_ChartSeriesLabelDefinition_Strategy(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Strategy = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy)Value;
        }
        private object get_120_ChartSeries_IsSelectedBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelectedBinding;
        }
        private void set_120_ChartSeries_IsSelectedBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelectedBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_121_ChartSeries_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ShowLabels;
        }
        private void set_121_ChartSeries_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_122_ChartSeries_DisplayName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.DisplayName;
        }
        private void set_122_ChartSeries_DisplayName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_123_ChartSeries_ClipToPlotArea(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ClipToPlotArea;
        }
        private void set_123_ChartSeries_ClipToPlotArea(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ClipToPlotArea = (global::System.Boolean)Value;
        }
        private object get_124_ChartSeries_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ItemsSource;
        }
        private void set_124_ChartSeries_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_125_ChartSeries_ActualPaletteIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ActualPaletteIndex;
        }
        private object get_126_ChartElementPresenter_ZIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.ZIndex;
        }
        private void set_126_ChartElementPresenter_ZIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_127_ChartElementPresenter_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.Chart;
        }
        private object get_128_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_129_RadChartBase_ClipToBounds(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ClipToBounds;
        }
        private void set_129_RadChartBase_ClipToBounds(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ClipToBounds = (global::System.Boolean)Value;
        }
        private object get_130_RadChartBase_Palette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Palette;
        }
        private void set_130_RadChartBase_Palette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Palette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_131_RadChartBase_SeriesProvider(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SeriesProvider;
        }
        private void set_131_RadChartBase_SeriesProvider(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SeriesProvider = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider)Value;
        }
        private object get_132_RadChartBase_EmptyContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContent;
        }
        private void set_132_RadChartBase_EmptyContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_133_RadChartBase_EmptyContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContentTemplate;
        }
        private void set_133_RadChartBase_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_134_RadChartBase_PlotAreaStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaStyle;
        }
        private void set_134_RadChartBase_PlotAreaStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PlotAreaStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_135_RadChartBase_PaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PaletteName;
        }
        private void set_135_RadChartBase_PaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_136_RadChartBase_SelectionPalette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPalette;
        }
        private void set_136_RadChartBase_SelectionPalette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPalette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_137_RadChartBase_SelectionPaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPaletteName;
        }
        private void set_137_RadChartBase_SelectionPaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_138_RadChartBase_Behaviors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Behaviors;
        }
        private object get_139_ChartBehavior_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)instance;
            return that.Chart;
        }
        private object get_140_RadChartBase_Zoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Zoom;
        }
        private void set_140_RadChartBase_Zoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Zoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_141_RadChartBase_MaxZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MaxZoom;
        }
        private void set_141_RadChartBase_MaxZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MaxZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_142_RadChartBase_MinZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MinZoom;
        }
        private void set_142_RadChartBase_MinZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MinZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_143_RadChartBase_PlotOrigin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotOrigin;
        }
        private object get_144_RadChartBase_PlotAreaClip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaClip;
        }
        private object get_145_RadChartBase_ScrollOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ScrollOffset;
        }
        private void set_145_RadChartBase_ScrollOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ScrollOffset = (global::Windows.Foundation.Point)Value;
        }
        private object get_146_DoughnutSeries_InnerRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.DoughnutSeries)instance;
            return that.InnerRadiusFactor;
        }
        private void set_146_DoughnutSeries_InnerRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.DoughnutSeries)instance;
            that.InnerRadiusFactor = (global::System.Double)Value;
        }
        private object get_147_PropertyNameDataPointBinding_PropertyName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            return that.PropertyName;
        }
        private void set_147_PropertyNameDataPointBinding_PropertyName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            that.PropertyName = (global::System.String)Value;
        }
        private object get_148_ShopGroupeListView_listView(object instance)
        {
            var that = (global::NestedWorld.View.ShopViews.ShopGroupeListView)instance;
            return that.listView;
        }
        private void set_148_ShopGroupeListView_listView(object instance, object Value)
        {
            var that = (global::NestedWorld.View.ShopViews.ShopGroupeListView)instance;
            that.listView = (global::Windows.UI.Xaml.Controls.ListView)Value;
        }
        private object get_149_ItemEffectView_NameEffect(object instance)
        {
            var that = (global::NestedWorld.View.ShopViews.ItemEffectView)instance;
            return that.NameEffect;
        }
        private void set_149_ItemEffectView_NameEffect(object instance, object Value)
        {
            var that = (global::NestedWorld.View.ShopViews.ItemEffectView)instance;
            that.NameEffect = (global::System.String)Value;
        }
        private object get_150_ItemEffectView_LevelEffect(object instance)
        {
            var that = (global::NestedWorld.View.ShopViews.ItemEffectView)instance;
            return that.LevelEffect;
        }
        private void set_150_ItemEffectView_LevelEffect(object instance, object Value)
        {
            var that = (global::NestedWorld.View.ShopViews.ItemEffectView)instance;
            that.LevelEffect = (global::System.Int32)Value;
        }
        private object get_151_D2DTextStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.Foreground;
        }
        private void set_151_D2DTextStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.Foreground = (global::Telerik.UI.Drawing.D2DBrush)Value;
        }
        private object get_152_D2DTextStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.FontWeight;
        }
        private void set_152_D2DTextStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.FontWeight = (global::Telerik.UI.Drawing.FontWeightName)Value;
        }
        private object get_153_D2DTextStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.FontSize;
        }
        private void set_153_D2DTextStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_154_D2DTextStyle_FontLocale(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.FontLocale;
        }
        private void set_154_D2DTextStyle_FontLocale(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.FontLocale = (global::System.String)Value;
        }
        private object get_155_D2DTextStyle_FontName(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.FontName;
        }
        private void set_155_D2DTextStyle_FontName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.FontName = (global::System.String)Value;
        }
        private object get_156_D2DTextStyle_TextAlignment(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.TextAlignment;
        }
        private void set_156_D2DTextStyle_TextAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.TextAlignment = (global::Windows.UI.Xaml.TextAlignment)Value;
        }
        private object get_157_D2DTextStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            return that.FontStyle;
        }
        private void set_157_D2DTextStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DTextStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_158_D2DShapeStyle_StrokeThickness(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            return that.StrokeThickness;
        }
        private void set_158_D2DShapeStyle_StrokeThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_159_D2DShapeStyle_Stroke(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            return that.Stroke;
        }
        private void set_159_D2DShapeStyle_Stroke(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            that.Stroke = (global::Telerik.UI.Drawing.D2DBrush)Value;
        }
        private object get_160_D2DShapeStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            return that.Foreground;
        }
        private void set_160_D2DShapeStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            that.Foreground = (global::Telerik.UI.Drawing.D2DBrush)Value;
        }
        private object get_161_D2DShapeStyle_Fill(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            return that.Fill;
        }
        private void set_161_D2DShapeStyle_Fill(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DShapeStyle)instance;
            that.Fill = (global::Telerik.UI.Drawing.D2DBrush)Value;
        }
        private object get_162_D2DSolidColorBrush_Color(object instance)
        {
            var that = (global::Telerik.UI.Drawing.D2DSolidColorBrush)instance;
            return that.Color;
        }
        private void set_162_D2DSolidColorBrush_Color(object instance, object Value)
        {
            var that = (global::Telerik.UI.Drawing.D2DSolidColorBrush)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_163_ChartAnnotationLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Format;
        }
        private void set_163_ChartAnnotationLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_164_ChartAnnotationLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Template;
        }
        private void set_164_ChartAnnotationLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_165_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_165_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_166_ChartAnnotationLabelDefinition_Location(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Location;
        }
        private void set_166_ChartAnnotationLabelDefinition_Location(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Location = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation)Value;
        }
        private object get_167_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_167_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_168_ChartAnnotationLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_168_ChartAnnotationLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_169_ChartAnnotationLabelDefinition_HorizontalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalOffset;
        }
        private void set_169_ChartAnnotationLabelDefinition_HorizontalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_170_ChartAnnotationLabelDefinition_VerticalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalOffset;
        }
        private void set_170_ChartAnnotationLabelDefinition_VerticalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_171_HexLayoutDefinitionBase_Orientation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.Orientation;
        }
        private void set_171_HexLayoutDefinitionBase_Orientation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_172_HexLayoutDefinitionBase_ItemLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ItemLength;
        }
        private void set_172_HexLayoutDefinitionBase_ItemLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ItemLength = (global::System.Double)Value;
        }
        private object get_173_HexLayoutDefinitionBase_ItemsSpacing(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ItemsSpacing;
        }
        private void set_173_HexLayoutDefinitionBase_ItemsSpacing(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ItemsSpacing = (global::System.Double)Value;
        }
        private object get_174_HexLayoutDefinitionBase_ViewPortExtension(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ViewPortExtension;
        }
        private void set_174_HexLayoutDefinitionBase_ViewPortExtension(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ViewPortExtension = (global::System.Double)Value;
        }
        private object get_175_HighlightStyle_FontFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontFamily;
        }
        private void set_175_HighlightStyle_FontFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_176_HighlightStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontWeight;
        }
        private void set_176_HighlightStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontWeight = (global::Telerik.UI.Xaml.Controls.Input.FontWeightName)Value;
        }
        private object get_177_HighlightStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontStyle;
        }
        private void set_177_HighlightStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_178_HighlightStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.Foreground;
        }
        private void set_178_HighlightStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_179_HighlightStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontSize;
        }
        private void set_179_HighlightStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_180_CalendarCellStyle_ContentStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.ContentStyle;
        }
        private void set_180_CalendarCellStyle_ContentStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_181_CalendarCellStyle_DecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.DecorationStyle;
        }
        private void set_181_CalendarCellStyle_DecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.DecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_182_RadRadialMenu_Items(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.Items;
        }
        private object get_183_RadialMenuItem_ChildItems(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ChildItems;
        }
        private object get_184_RadialMenuItem_ToolTipContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ToolTipContent;
        }
        private void set_184_RadialMenuItem_ToolTipContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.ToolTipContent = (global::System.Object)Value;
        }
        private object get_185_RadialMenuItem_CommandParameter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.CommandParameter;
        }
        private void set_185_RadialMenuItem_CommandParameter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_186_RadialMenuItem_IsEnabled(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IsEnabled;
        }
        private void set_186_RadialMenuItem_IsEnabled(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_187_RadialMenuItem_Command(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Command;
        }
        private void set_187_RadialMenuItem_Command(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_188_RadialMenuItem_ParentItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ParentItem;
        }
        private object get_189_RadialMenuItem_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IsSelected;
        }
        private void set_189_RadialMenuItem_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_190_RadialMenuItem_GroupName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.GroupName;
        }
        private void set_190_RadialMenuItem_GroupName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.GroupName = (global::System.String)Value;
        }
        private object get_191_RadialMenuItem_Selectable(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Selectable;
        }
        private void set_191_RadialMenuItem_Selectable(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Selectable = (global::System.Boolean)Value;
        }
        private object get_192_RadialMenuItem_Deselectable(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Deselectable;
        }
        private void set_192_RadialMenuItem_Deselectable(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Deselectable = (global::System.Boolean)Value;
        }
        private object get_193_RadialMenuItem_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Header;
        }
        private void set_193_RadialMenuItem_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_194_RadialMenuItem_IconContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IconContent;
        }
        private void set_194_RadialMenuItem_IconContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IconContent = (global::System.Object)Value;
        }
        private object get_195_RadialMenuItem_ContentSectorBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ContentSectorBackground;
        }
        private void set_195_RadialMenuItem_ContentSectorBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.ContentSectorBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_196_RadRadialMenu_ShowToolTip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.ShowToolTip;
        }
        private void set_196_RadRadialMenu_ShowToolTip(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.ShowToolTip = (global::System.Boolean)Value;
        }
        private object get_197_RadRadialMenu_IsOpen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.IsOpen;
        }
        private void set_197_RadRadialMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_198_RadRadialMenu_StartAngle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.StartAngle;
        }
        private void set_198_RadRadialMenu_StartAngle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_199_RadRadialMenu_InnerNavigationRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.InnerNavigationRadiusFactor;
        }
        private void set_199_RadRadialMenu_InnerNavigationRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.InnerNavigationRadiusFactor = (global::System.Double)Value;
        }
        private object get_200_RadRadialMenu_InnerRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.InnerRadiusFactor;
        }
        private void set_200_RadRadialMenu_InnerRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.InnerRadiusFactor = (global::System.Double)Value;
        }
        private object get_201_RadRadialMenu_OuterRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.OuterRadiusFactor;
        }
        private void set_201_RadRadialMenu_OuterRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.OuterRadiusFactor = (global::System.Double)Value;
        }
        private object get_202_RadRadialMenu_ContentMenuBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.ContentMenuBackgroundStyle;
        }
        private void set_202_RadRadialMenu_ContentMenuBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.ContentMenuBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_203_RadRadialMenu_NavigationMenuBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.NavigationMenuBackgroundStyle;
        }
        private void set_203_RadRadialMenu_NavigationMenuBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.NavigationMenuBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_204_RadRadialMenu_CommandService(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.CommandService;
        }
        private object get_205_RadRadialMenu_Commands(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.Commands;
        }
        private object get_206_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)instance;
            return that.Owner;
        }
        private object get_207_RadRadialMenu_TargetElement(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.TargetElement;
        }
        private object get_208_RadialMenuTriggerBehavior_AttachTriggers(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior)instance;
            return that.AttachTriggers;
        }
        private void set_208_RadialMenuTriggerBehavior_AttachTriggers(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior)instance;
            that.AttachTriggers = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers)Value;
        }
        private object get_209_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.Owner;
        }
        private object get_210_BusyIndicatorAnimationAdapter_Animation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter)instance;
            return that.Animation;
        }
        private void set_210_BusyIndicatorAnimationAdapter_Animation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter)instance;
            that.Animation = (global::Windows.UI.Xaml.Media.Animation.Storyboard)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember xamlMember = null;
            global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "NestedWorld.View.BattleViews.BattleCanvas.core":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.BattleCanvas");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "core", "NestedWorld.Classes.ElementsGame.Battle.BattleCore");
                xamlMember.Getter = get_4_BattleCanvas_core;
                xamlMember.Setter = set_4_BattleCanvas_core;
                break;
            case "NestedWorld.View.BattleViews.EnemieMonster.MonsterImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.EnemieMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_EnemieMonster_MonsterImage;
                xamlMember.Setter = set_5_EnemieMonster_MonsterImage;
                break;
            case "NestedWorld.View.BattleViews.EnemieMonster.MonsterName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.EnemieMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_EnemieMonster_MonsterName;
                xamlMember.Setter = set_6_EnemieMonster_MonsterName;
                break;
            case "NestedWorld.View.BattleViews.EnemieMonster.MonsterLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.EnemieMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_EnemieMonster_MonsterLevel;
                xamlMember.Setter = set_7_EnemieMonster_MonsterLevel;
                break;
            case "NestedWorld.View.BattleViews.EnemieMonster.MonsterLife":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.EnemieMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterLife", "Int32");
                xamlMember.Getter = get_8_EnemieMonster_MonsterLife;
                xamlMember.Setter = set_8_EnemieMonster_MonsterLife;
                break;
            case "NestedWorld.View.BattleViews.EnemieMonster.monster":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.EnemieMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monster", "NestedWorld.Classes.ElementsGame.Monsters.UserMonster");
                xamlMember.Getter = get_9_EnemieMonster_monster;
                xamlMember.Setter = set_9_EnemieMonster_monster;
                break;
            case "NestedWorld.View.BattleViews.UserMonster.MonsterImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.UserMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_UserMonster_MonsterImage;
                xamlMember.Setter = set_10_UserMonster_MonsterImage;
                break;
            case "NestedWorld.View.BattleViews.UserMonster.MonsterName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.UserMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_UserMonster_MonsterName;
                xamlMember.Setter = set_11_UserMonster_MonsterName;
                break;
            case "NestedWorld.View.BattleViews.UserMonster.MonsterLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.UserMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_UserMonster_MonsterLevel;
                xamlMember.Setter = set_12_UserMonster_MonsterLevel;
                break;
            case "NestedWorld.View.BattleViews.UserMonster.MonsterLife":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.UserMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterLife", "Int32");
                xamlMember.Getter = get_13_UserMonster_MonsterLife;
                xamlMember.Setter = set_13_UserMonster_MonsterLife;
                break;
            case "NestedWorld.View.BattleViews.UserMonster.monster":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.UserMonster");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monster", "NestedWorld.Classes.ElementsGame.Monsters.UserMonster");
                xamlMember.Getter = get_14_UserMonster_monster;
                xamlMember.Setter = set_14_UserMonster_monster;
                break;
            case "NestedWorld.Pages.BattlePage.Core":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Pages.BattlePage");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Core", "NestedWorld.Classes.ElementsGame.Battle.BattleCore");
                xamlMember.Getter = get_15_BattlePage_Core;
                xamlMember.Setter = set_15_BattlePage_Core;
                break;
            case "NestedWorld.Pages.BattlePage.Annimation":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Pages.BattlePage");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Annimation", "NestedWorld.View.BattleViews.AnnimationCanvas");
                xamlMember.Getter = get_16_BattlePage_Annimation;
                xamlMember.Setter = set_16_BattlePage_Annimation;
                break;
            case "NestedWorld.View.ChatViews.ChanelListView.listView":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.ChatViews.ChanelListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "listView", "Windows.UI.Xaml.Controls.ListView");
                xamlMember.Getter = get_17_ChanelListView_listView;
                xamlMember.Setter = set_17_ChanelListView_listView;
                break;
            case "NestedWorld.View.ChatViews.ChatView.channel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.ChatViews.ChatView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "channel", "NestedWorld.Classes.Chat.Channel");
                xamlMember.Getter = get_18_ChatView_channel;
                xamlMember.Setter = set_18_ChatView_channel;
                break;
            case "NestedWorld.Style.TabHeader.Icon":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeader");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Icon", "Windows.UI.Xaml.Media.Geometry");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_TabHeader_Icon;
                xamlMember.Setter = set_19_TabHeader_Icon;
                break;
            case "NestedWorld.Style.TabHeader.isSelect":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeader");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "isSelect", "Boolean");
                xamlMember.Getter = get_20_TabHeader_isSelect;
                xamlMember.Setter = set_20_TabHeader_isSelect;
                break;
            case "NestedWorld.View.ShopView.shop":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.ShopView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "shop", "NestedWorld.Classes.ElementsGame.Shop.Shop");
                xamlMember.Getter = get_21_ShopView_shop;
                xamlMember.Setter = set_21_ShopView_shop;
                break;
            case "NestedWorld.View.MonsterListView.monsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_22_MonsterListView_monsterList;
                xamlMember.Setter = set_22_MonsterListView_monsterList;
                break;
            case "NestedWorld.View.MonsterViews.MonsterFullView.monsterToDisplay":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterFullView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterToDisplay", "NestedWorld.Classes.ElementsGame.Monsters.UserMonster");
                xamlMember.Getter = get_23_MonsterFullView_monsterToDisplay;
                xamlMember.Setter = set_23_MonsterFullView_monsterToDisplay;
                break;
            case "NestedWorld.View.MonsterView.monsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_24_MonsterView_monsterList;
                xamlMember.Setter = set_24_MonsterView_monsterList;
                break;
            case "NestedWorld.View.UserView.userList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.UserView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "userList", "NestedWorld.Classes.ElementsGame.Users.UserList");
                xamlMember.Getter = get_25_UserView_userList;
                xamlMember.Setter = set_25_UserView_userList;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.UserBackground":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserBackground", "String");
                xamlMember.Getter = get_26_UsersProfileEntrance_UserBackground;
                xamlMember.Setter = set_26_UsersProfileEntrance_UserBackground;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.EnemieBackground":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "EnemieBackground", "String");
                xamlMember.Getter = get_27_UsersProfileEntrance_EnemieBackground;
                xamlMember.Setter = set_27_UsersProfileEntrance_EnemieBackground;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.UserImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserImage", "String");
                xamlMember.Getter = get_28_UsersProfileEntrance_UserImage;
                xamlMember.Setter = set_28_UsersProfileEntrance_UserImage;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.EnemieImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "EnemieImage", "String");
                xamlMember.Getter = get_29_UsersProfileEntrance_EnemieImage;
                xamlMember.Setter = set_29_UsersProfileEntrance_EnemieImage;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.UserLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_UsersProfileEntrance_UserLevel;
                xamlMember.Setter = set_30_UsersProfileEntrance_UserLevel;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.EnemieLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "EnemieLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_UsersProfileEntrance_EnemieLevel;
                xamlMember.Setter = set_31_UsersProfileEntrance_EnemieLevel;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.UserName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "UserName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_UsersProfileEntrance_UserName;
                xamlMember.Setter = set_32_UsersProfileEntrance_UserName;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.EnemieName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "EnemieName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_UsersProfileEntrance_EnemieName;
                xamlMember.Setter = set_33_UsersProfileEntrance_EnemieName;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.User":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "User", "NestedWorld.Classes.ElementsGame.GameCore.UserInfo");
                xamlMember.Getter = get_34_UsersProfileEntrance_User;
                xamlMember.Setter = set_34_UsersProfileEntrance_User;
                break;
            case "NestedWorld.View.PrepareBattleView.UsersProfileEntrance.Enemie":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UsersProfileEntrance");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Enemie", "NestedWorld.Classes.ElementsGame.Users.User");
                xamlMember.Getter = get_35_UsersProfileEntrance_Enemie;
                xamlMember.Setter = set_35_UsersProfileEntrance_Enemie;
                break;
            case "NestedWorld.View.PrepareBattleView.UserMonsterListView.monsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UserMonsterListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_36_UserMonsterListView_monsterList;
                xamlMember.Setter = set_36_UserMonsterListView_monsterList;
                break;
            case "NestedWorld.View.PrepareBattleView.UserMonsterListView.SelectedMonsterList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.PrepareBattleView.UserMonsterListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SelectedMonsterList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterList");
                xamlMember.Getter = get_37_UserMonsterListView_SelectedMonsterList;
                xamlMember.SetIsReadOnly();
                break;
            case "NestedWorld.Style.TabHeaderMap.isSelect":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Style.TabHeaderMap");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "isSelect", "Boolean");
                xamlMember.Getter = get_38_TabHeaderMap_isSelect;
                xamlMember.Setter = set_38_TabHeaderMap_isSelect;
                break;
            case "NestedWorld.View.BattleViews.BattleIcon.ImageItem":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.BattleIcon");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ImageItem", "String");
                xamlMember.Getter = get_39_BattleIcon_ImageItem;
                xamlMember.Setter = set_39_BattleIcon_ImageItem;
                break;
            case "NestedWorld.View.BattleViews.BattleIcon.left":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.BattleIcon");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "left", "Double");
                xamlMember.Getter = get_40_BattleIcon_left;
                xamlMember.Setter = set_40_BattleIcon_left;
                break;
            case "NestedWorld.View.BattleViews.BattleIcon.top":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.BattleIcon");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "top", "Double");
                xamlMember.Getter = get_41_BattleIcon_top;
                xamlMember.Setter = set_41_BattleIcon_top;
                break;
            case "NestedWorld.View.BattleViews.BattleIcon.IsActive":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.BattleViews.BattleIcon");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.Getter = get_42_BattleIcon_IsActive;
                xamlMember.Setter = set_42_BattleIcon_IsActive;
                break;
            case "NestedWorld.Classes.Chat.MessageContentPresenter.RightTemplate":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Classes.Chat.MessageContentPresenter");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "RightTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_43_MessageContentPresenter_RightTemplate;
                xamlMember.Setter = set_43_MessageContentPresenter_RightTemplate;
                break;
            case "NestedWorld.Classes.Chat.MessageContentPresenter.LeftTemplate":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.Classes.Chat.MessageContentPresenter");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "LeftTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_44_MessageContentPresenter_LeftTemplate;
                xamlMember.Setter = set_44_MessageContentPresenter_LeftTemplate;
                break;
            case "NestedWorld.View.GardenViews.GardenElementListView.listView":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenViews.GardenElementListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "listView", "Windows.UI.Xaml.Controls.GridView");
                xamlMember.Getter = get_45_GardenElementListView_listView;
                xamlMember.Setter = set_45_GardenElementListView_listView;
                break;
            case "NestedWorld.View.GardenViews.GardenItem.ImageItem":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenViews.GardenItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ImageItem", "String");
                xamlMember.Getter = get_46_GardenItem_ImageItem;
                xamlMember.Setter = set_46_GardenItem_ImageItem;
                break;
            case "NestedWorld.View.GardenViews.GardenItem.time":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenViews.GardenItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "time", "Double");
                xamlMember.Getter = get_47_GardenItem_time;
                xamlMember.Setter = set_47_GardenItem_time;
                break;
            case "NestedWorld.View.GardenViews.GardenItem.left":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenViews.GardenItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "left", "Double");
                xamlMember.Getter = get_48_GardenItem_left;
                xamlMember.Setter = set_48_GardenItem_left;
                break;
            case "NestedWorld.View.GardenViews.GardenItem.top":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenViews.GardenItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "top", "Double");
                xamlMember.Getter = get_49_GardenItem_top;
                xamlMember.Setter = set_49_GardenItem_top;
                break;
            case "NestedWorld.View.GardenViews.GardenItem.element":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.GardenViews.GardenItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "element", "NestedWorld.Classes.Garden.GardenElement");
                xamlMember.Getter = get_50_GardenItem_element;
                xamlMember.Setter = set_50_GardenItem_element;
                break;
            case "NestedWorld.View.NotificationView.NotificationNumber":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.NotificationView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "NotificationNumber", "Int32");
                xamlMember.Getter = get_51_NotificationView_NotificationNumber;
                xamlMember.Setter = set_51_NotificationView_NotificationNumber;
                break;
            case "NestedWorld.View.NotificationView.Tap":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.NotificationView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Tap", "Windows.UI.Xaml.Input.TappedEventHandler");
                xamlMember.Getter = get_52_NotificationView_Tap;
                xamlMember.SetIsReadOnly();
                break;
            case "NestedWorld.View.MapViews.MapControlView.mapControl":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MapViews.MapControlView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "mapControl", "Windows.UI.Xaml.Controls.Maps.MapControl");
                xamlMember.Getter = get_53_MapControlView_mapControl;
                xamlMember.Setter = set_53_MapControlView_mapControl;
                break;
            case "NestedWorld.View.MapViews.MonsterMapList.root":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MapViews.MonsterMapList");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "root", "Windows.UI.Xaml.Controls.StackPanel");
                xamlMember.Getter = get_54_MonsterMapList_root;
                xamlMember.SetIsReadOnly();
                break;
            case "NestedWorld.View.MapViews.UserMapList.root":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MapViews.UserMapList");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "root", "Windows.UI.Xaml.Controls.StackPanel");
                xamlMember.Getter = get_55_UserMapList_root;
                xamlMember.SetIsReadOnly();
                break;
            case "NestedWorld.View.MonsterSoloView.MonsterName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_MonsterSoloView_MonsterName;
                xamlMember.Setter = set_56_MonsterSoloView_MonsterName;
                break;
            case "NestedWorld.View.MonsterSoloView.Level":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Level", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_MonsterSoloView_Level;
                xamlMember.Setter = set_57_MonsterSoloView_Level;
                break;
            case "NestedWorld.View.MonsterSoloView.MonsterImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_MonsterSoloView_MonsterImage;
                xamlMember.Setter = set_58_MonsterSoloView_MonsterImage;
                break;
            case "NestedWorld.View.MonsterSoloView.Type":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Type", "NestedWorld.Classes.ElementsGame.TypeEnum");
                xamlMember.Getter = get_59_MonsterSoloView_Type;
                xamlMember.Setter = set_59_MonsterSoloView_Type;
                break;
            case "NestedWorld.View.MonsterSoloView.BackgroundColor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "BackgroundColor", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_MonsterSoloView_BackgroundColor;
                xamlMember.Setter = set_60_MonsterSoloView_BackgroundColor;
                break;
            case "NestedWorld.View.MonsterSoloView.userMonster":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterSoloView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "userMonster", "NestedWorld.Classes.ElementsGame.Monsters.UserMonster");
                xamlMember.Getter = get_61_MonsterSoloView_userMonster;
                xamlMember.Setter = set_61_MonsterSoloView_userMonster;
                break;
            case "NestedWorld.View.MonsterViews.MonsterAttacksView.monsterAttackList":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterAttacksView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "monsterAttackList", "NestedWorld.Classes.ElementsGame.Monsters.MonsterAttckList");
                xamlMember.Getter = get_62_MonsterAttacksView_monsterAttackList;
                xamlMember.Setter = set_62_MonsterAttacksView_monsterAttackList;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_MonsterHeaderView_MonsterName;
                xamlMember.Setter = set_63_MonsterHeaderView_MonsterName;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterImage":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterImage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_MonsterHeaderView_MonsterImage;
                xamlMember.Setter = set_64_MonsterHeaderView_MonsterImage;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterType":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterType", "NestedWorld.Classes.ElementsGame.TypeEnum");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_MonsterHeaderView_MonsterType;
                xamlMember.Setter = set_65_MonsterHeaderView_MonsterType;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterCombat":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterCombat", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_MonsterHeaderView_MonsterCombat;
                xamlMember.Setter = set_66_MonsterHeaderView_MonsterCombat;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterLevel":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_MonsterHeaderView_MonsterLevel;
                xamlMember.Setter = set_67_MonsterHeaderView_MonsterLevel;
                break;
            case "NestedWorld.View.MonsterViews.MonsterHeaderView.MonsterVictory":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterHeaderView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MonsterVictory", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_MonsterHeaderView_MonsterVictory;
                xamlMember.Setter = set_68_MonsterHeaderView_MonsterVictory;
                break;
            case "NestedWorld.View.MonsterViews.MonsterStatsView.Life":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterStatsView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Life", "Int32");
                xamlMember.Getter = get_69_MonsterStatsView_Life;
                xamlMember.Setter = set_69_MonsterStatsView_Life;
                break;
            case "NestedWorld.View.MonsterViews.MonsterStatsView.Exp":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.MonsterViews.MonsterStatsView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Exp", "Int32");
                xamlMember.Getter = get_70_MonsterStatsView_Exp;
                xamlMember.Setter = set_70_MonsterStatsView_Exp;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.FillEntries":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_71_ChartPalette_FillEntries;
                xamlMember.Setter = set_71_ChartPalette_FillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Brushes", "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>");
                xamlMember.Getter = get_72_PaletteEntryCollection_Brushes;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.StrokeEntries":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "StrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_73_ChartPalette_StrokeEntries;
                xamlMember.Setter = set_73_ChartPalette_StrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.Name":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_74_ChartPalette_Name;
                xamlMember.Setter = set_74_ChartPalette_Name;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialFillEntries":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SpecialFillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_75_ChartPalette_SpecialFillEntries;
                xamlMember.Setter = set_75_ChartPalette_SpecialFillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialStrokeEntries":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SpecialStrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_76_ChartPalette_SpecialStrokeEntries;
                xamlMember.Setter = set_76_ChartPalette_SpecialStrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.SeriesFamily":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SeriesFamily", "String");
                xamlMember.Getter = get_77_PaletteEntryCollection_SeriesFamily;
                xamlMember.Setter = set_77_PaletteEntryCollection_SeriesFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadPieChart.Series":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadPieChart");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Series", "Telerik.UI.Xaml.Controls.Chart.PieSeriesCollection");
                xamlMember.Getter = get_78_RadPieChart_Series;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.DataPoints":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Core.ElementCollection`1<Telerik.Charting.PieDataPoint>");
                xamlMember.Getter = get_79_PieSeries_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.PieDataPoint.Percent":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.PieDataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Percent", "Double");
                xamlMember.Getter = get_80_PieDataPoint_Percent;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.PieDataPoint.OffsetFromCenter":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.PieDataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "OffsetFromCenter", "Double");
                xamlMember.Getter = get_81_PieDataPoint_OffsetFromCenter;
                xamlMember.Setter = set_81_PieDataPoint_OffsetFromCenter;
                break;
            case "Telerik.Charting.PieDataPoint.StartAngle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.PieDataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.Getter = get_82_PieDataPoint_StartAngle;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.PieDataPoint.SweepAngle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.PieDataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SweepAngle", "Double");
                xamlMember.Getter = get_83_PieDataPoint_SweepAngle;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.SingleValueDataPoint.Value":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.SingleValueDataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_84_SingleValueDataPoint_Value;
                xamlMember.Setter = set_84_SingleValueDataPoint_Value;
                break;
            case "Telerik.Charting.DataPoint.Label":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Label", "Object");
                xamlMember.Getter = get_85_DataPoint_Label;
                xamlMember.Setter = set_85_DataPoint_Label;
                break;
            case "Telerik.Charting.DataPoint.DataItem":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DataItem", "Object");
                xamlMember.Getter = get_86_DataPoint_DataItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.DataPoint.IsSelected":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_87_DataPoint_IsSelected;
                xamlMember.Setter = set_87_DataPoint_IsSelected;
                break;
            case "Telerik.Core.Node.Presenter":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Presenter", "Telerik.Core.IElementPresenter");
                xamlMember.Getter = get_88_Node_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.IsArrangeValid":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsArrangeValid", "Boolean");
                xamlMember.Getter = get_89_Node_IsArrangeValid;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.NodeState":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "NodeState", "Telerik.Core.NodeState");
                xamlMember.Getter = get_90_Node_NodeState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.Index":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.Getter = get_91_Node_Index;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.CollectionIndex":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "CollectionIndex", "Int32");
                xamlMember.Getter = get_92_Node_CollectionIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.IsTreeLoaded":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsTreeLoaded", "Boolean");
                xamlMember.Getter = get_93_Node_IsTreeLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.LayoutSlot":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "LayoutSlot", "Telerik.Core.RadRect");
                xamlMember.Getter = get_94_Node_LayoutSlot;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.Parent":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Parent", "Telerik.Core.Element");
                xamlMember.Getter = get_95_Node_Parent;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.HighlightInnerRadiusFactor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "HighlightInnerRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_PieSeries_HighlightInnerRadiusFactor;
                xamlMember.Setter = set_96_PieSeries_HighlightInnerRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.HighlightBrush":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "HighlightBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_PieSeries_HighlightBrush;
                xamlMember.Setter = set_97_PieSeries_HighlightBrush;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.DefaultSegmentStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DefaultSegmentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_PieSeries_DefaultSegmentStyle;
                xamlMember.Setter = set_98_PieSeries_DefaultSegmentStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.SelectedPointOffset":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SelectedPointOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_PieSeries_SelectedPointOffset;
                xamlMember.Setter = set_99_PieSeries_SelectedPointOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.ValueBinding":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ValueBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_PieSeries_ValueBinding;
                xamlMember.Setter = set_100_PieSeries_ValueBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.LegendTitleBinding":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "LegendTitleBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_PieSeries_LegendTitleBinding;
                xamlMember.Setter = set_101_PieSeries_LegendTitleBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.IsVisibleInLegendBinding":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsVisibleInLegendBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_PieSeries_IsVisibleInLegendBinding;
                xamlMember.Setter = set_102_PieSeries_IsVisibleInLegendBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.SegmentStyleSelector":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SegmentStyleSelector", "Windows.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_PieSeries_SegmentStyleSelector;
                xamlMember.Setter = set_103_PieSeries_SegmentStyleSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.RadiusFactor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "RadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_PieSeries_RadiusFactor;
                xamlMember.Setter = set_104_PieSeries_RadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.SegmentStyles":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SegmentStyles", "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.Style>");
                xamlMember.Getter = get_105_PieSeries_SegmentStyles;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PieSeries.AngleRange":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PieSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "AngleRange", "Telerik.Charting.AngleRange");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_PieSeries_AngleRange;
                xamlMember.Setter = set_106_PieSeries_AngleRange;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelected":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_ChartSeries_IsSelected;
                xamlMember.Setter = set_107_ChartSeries_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.AllowSelect":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "AllowSelect", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_ChartSeries_AllowSelect;
                xamlMember.Setter = set_108_ChartSeries_AllowSelect;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.PaletteIndex":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "PaletteIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_ChartSeries_PaletteIndex;
                xamlMember.Setter = set_109_ChartSeries_PaletteIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.LabelDefinitions":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "LabelDefinitions", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                xamlMember.Getter = get_110_ChartSeries_LabelDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.HorizontalAlignment":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_ChartSeriesLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_111_ChartSeriesLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.VerticalAlignment":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_ChartSeriesLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_112_ChartSeriesLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Template":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_ChartSeriesLabelDefinition_Template;
                xamlMember.Setter = set_113_ChartSeriesLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Binding":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Binding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_ChartSeriesLabelDefinition_Binding;
                xamlMember.Setter = set_114_ChartSeriesLabelDefinition_Binding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Format":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_ChartSeriesLabelDefinition_Format;
                xamlMember.Setter = set_115_ChartSeriesLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Margin":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Margin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_ChartSeriesLabelDefinition_Margin;
                xamlMember.Setter = set_116_ChartSeriesLabelDefinition_Margin;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.TemplateSelector":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "TemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_ChartSeriesLabelDefinition_TemplateSelector;
                xamlMember.Setter = set_117_ChartSeriesLabelDefinition_TemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.DefaultVisualStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_ChartSeriesLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_118_ChartSeriesLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Strategy":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Strategy", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_ChartSeriesLabelDefinition_Strategy;
                xamlMember.Setter = set_119_ChartSeriesLabelDefinition_Strategy;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelectedBinding":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsSelectedBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_ChartSeries_IsSelectedBinding;
                xamlMember.Setter = set_120_ChartSeries_IsSelectedBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ShowLabels":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_ChartSeries_ShowLabels;
                xamlMember.Setter = set_121_ChartSeries_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.DisplayName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_122_ChartSeries_DisplayName;
                xamlMember.Setter = set_122_ChartSeries_DisplayName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ClipToPlotArea":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ClipToPlotArea", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_ChartSeries_ClipToPlotArea;
                xamlMember.Setter = set_123_ChartSeries_ClipToPlotArea;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ItemsSource":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_ChartSeries_ItemsSource;
                xamlMember.Setter = set_124_ChartSeries_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ActualPaletteIndex":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ActualPaletteIndex", "Int32");
                xamlMember.Getter = get_125_ChartSeries_ActualPaletteIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.ZIndex":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_126_ChartElementPresenter_ZIndex;
                xamlMember.Setter = set_126_ChartElementPresenter_ZIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.Chart":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_127_ChartElementPresenter_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_128_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ClipToBounds":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.Getter = get_129_RadChartBase_ClipToBounds;
                xamlMember.Setter = set_129_RadChartBase_ClipToBounds;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Palette":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Palette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_RadChartBase_Palette;
                xamlMember.Setter = set_130_RadChartBase_Palette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SeriesProvider":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SeriesProvider", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_RadChartBase_SeriesProvider;
                xamlMember.Setter = set_131_RadChartBase_SeriesProvider;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContent":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_RadChartBase_EmptyContent;
                xamlMember.Setter = set_132_RadChartBase_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContentTemplate":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_RadChartBase_EmptyContentTemplate;
                xamlMember.Setter = set_133_RadChartBase_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "PlotAreaStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_RadChartBase_PlotAreaStyle;
                xamlMember.Setter = set_134_RadChartBase_PlotAreaStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PaletteName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "PaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_RadChartBase_PaletteName;
                xamlMember.Setter = set_135_RadChartBase_PaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPalette":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SelectionPalette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_RadChartBase_SelectionPalette;
                xamlMember.Setter = set_136_RadChartBase_SelectionPalette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPaletteName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "SelectionPaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_RadChartBase_SelectionPaletteName;
                xamlMember.Setter = set_137_RadChartBase_SelectionPaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Behaviors":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Behaviors", "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection");
                xamlMember.Getter = get_138_RadChartBase_Behaviors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartBehavior.Chart":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_139_ChartBehavior_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Zoom":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Zoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_RadChartBase_Zoom;
                xamlMember.Setter = set_140_RadChartBase_Zoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MaxZoom":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MaxZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_RadChartBase_MaxZoom;
                xamlMember.Setter = set_141_RadChartBase_MaxZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MinZoom":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "MinZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_RadChartBase_MinZoom;
                xamlMember.Setter = set_142_RadChartBase_MinZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotOrigin":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "PlotOrigin", "Windows.Foundation.Point");
                xamlMember.Getter = get_143_RadChartBase_PlotOrigin;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaClip":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "PlotAreaClip", "Telerik.Core.RadRect");
                xamlMember.Getter = get_144_RadChartBase_PlotAreaClip;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ScrollOffset":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ScrollOffset", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_RadChartBase_ScrollOffset;
                xamlMember.Setter = set_145_RadChartBase_ScrollOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.DoughnutSeries.InnerRadiusFactor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.DoughnutSeries");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "InnerRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_DoughnutSeries_InnerRadiusFactor;
                xamlMember.Setter = set_146_DoughnutSeries_InnerRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding.PropertyName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "PropertyName", "String");
                xamlMember.Getter = get_147_PropertyNameDataPointBinding_PropertyName;
                xamlMember.Setter = set_147_PropertyNameDataPointBinding_PropertyName;
                break;
            case "NestedWorld.View.ShopViews.ShopGroupeListView.listView":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.ShopViews.ShopGroupeListView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "listView", "Windows.UI.Xaml.Controls.ListView");
                xamlMember.Getter = get_148_ShopGroupeListView_listView;
                xamlMember.Setter = set_148_ShopGroupeListView_listView;
                break;
            case "NestedWorld.View.ShopViews.ItemEffectView.NameEffect":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.ShopViews.ItemEffectView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "NameEffect", "String");
                xamlMember.Getter = get_149_ItemEffectView_NameEffect;
                xamlMember.Setter = set_149_ItemEffectView_NameEffect;
                break;
            case "NestedWorld.View.ShopViews.ItemEffectView.LevelEffect":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("NestedWorld.View.ShopViews.ItemEffectView");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "LevelEffect", "Int32");
                xamlMember.Getter = get_150_ItemEffectView_LevelEffect;
                xamlMember.Setter = set_150_ItemEffectView_LevelEffect;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.Foreground":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Foreground", "Telerik.UI.Drawing.D2DBrush");
                xamlMember.Getter = get_151_D2DTextStyle_Foreground;
                xamlMember.Setter = set_151_D2DTextStyle_Foreground;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.FontWeight":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Drawing.FontWeightName");
                xamlMember.Getter = get_152_D2DTextStyle_FontWeight;
                xamlMember.Setter = set_152_D2DTextStyle_FontWeight;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.FontSize":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.Getter = get_153_D2DTextStyle_FontSize;
                xamlMember.Setter = set_153_D2DTextStyle_FontSize;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.FontLocale":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontLocale", "String");
                xamlMember.Getter = get_154_D2DTextStyle_FontLocale;
                xamlMember.Setter = set_154_D2DTextStyle_FontLocale;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.FontName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontName", "String");
                xamlMember.Getter = get_155_D2DTextStyle_FontName;
                xamlMember.Setter = set_155_D2DTextStyle_FontName;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.TextAlignment":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "TextAlignment", "Windows.UI.Xaml.TextAlignment");
                xamlMember.Getter = get_156_D2DTextStyle_TextAlignment;
                xamlMember.Setter = set_156_D2DTextStyle_TextAlignment;
                break;
            case "Telerik.UI.Drawing.D2DTextStyle.FontStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DTextStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.Getter = get_157_D2DTextStyle_FontStyle;
                xamlMember.Setter = set_157_D2DTextStyle_FontStyle;
                break;
            case "Telerik.UI.Drawing.D2DShapeStyle.StrokeThickness":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DShapeStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.Getter = get_158_D2DShapeStyle_StrokeThickness;
                xamlMember.Setter = set_158_D2DShapeStyle_StrokeThickness;
                break;
            case "Telerik.UI.Drawing.D2DShapeStyle.Stroke":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DShapeStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Stroke", "Telerik.UI.Drawing.D2DBrush");
                xamlMember.Getter = get_159_D2DShapeStyle_Stroke;
                xamlMember.Setter = set_159_D2DShapeStyle_Stroke;
                break;
            case "Telerik.UI.Drawing.D2DShapeStyle.Foreground":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DShapeStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Foreground", "Telerik.UI.Drawing.D2DBrush");
                xamlMember.Getter = get_160_D2DShapeStyle_Foreground;
                xamlMember.Setter = set_160_D2DShapeStyle_Foreground;
                break;
            case "Telerik.UI.Drawing.D2DShapeStyle.Fill":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DShapeStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Fill", "Telerik.UI.Drawing.D2DBrush");
                xamlMember.Getter = get_161_D2DShapeStyle_Fill;
                xamlMember.Setter = set_161_D2DShapeStyle_Fill;
                break;
            case "Telerik.UI.Drawing.D2DSolidColorBrush.Color":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Drawing.D2DSolidColorBrush");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_162_D2DSolidColorBrush_Color;
                xamlMember.Setter = set_162_D2DSolidColorBrush_Color;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Format":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_ChartAnnotationLabelDefinition_Format;
                xamlMember.Setter = set_163_ChartAnnotationLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Template":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_ChartAnnotationLabelDefinition_Template;
                xamlMember.Setter = set_164_ChartAnnotationLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.DefaultVisualStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_165_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Location":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Location", "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_ChartAnnotationLabelDefinition_Location;
                xamlMember.Setter = set_166_ChartAnnotationLabelDefinition_Location;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalAlignment":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_ChartAnnotationLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_167_ChartAnnotationLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalAlignment":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_ChartAnnotationLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_168_ChartAnnotationLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalOffset":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_ChartAnnotationLabelDefinition_HorizontalOffset;
                xamlMember.Setter = set_169_ChartAnnotationLabelDefinition_HorizontalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalOffset":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_ChartAnnotationLabelDefinition_VerticalOffset;
                xamlMember.Setter = set_170_ChartAnnotationLabelDefinition_VerticalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.Orientation":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_HexLayoutDefinitionBase_Orientation;
                xamlMember.Setter = set_171_HexLayoutDefinitionBase_Orientation;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ItemLength":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ItemLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_HexLayoutDefinitionBase_ItemLength;
                xamlMember.Setter = set_172_HexLayoutDefinitionBase_ItemLength;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ItemsSpacing":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ItemsSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_HexLayoutDefinitionBase_ItemsSpacing;
                xamlMember.Setter = set_173_HexLayoutDefinitionBase_ItemsSpacing;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ViewPortExtension":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ViewPortExtension", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_HexLayoutDefinitionBase_ViewPortExtension;
                xamlMember.Setter = set_174_HexLayoutDefinitionBase_ViewPortExtension;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontFamily":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_HighlightStyle_FontFamily;
                xamlMember.Setter = set_175_HighlightStyle_FontFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontWeight":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Xaml.Controls.Input.FontWeightName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_HighlightStyle_FontWeight;
                xamlMember.Setter = set_176_HighlightStyle_FontWeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_HighlightStyle_FontStyle;
                xamlMember.Setter = set_177_HighlightStyle_FontStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.Foreground":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_HighlightStyle_Foreground;
                xamlMember.Setter = set_178_HighlightStyle_Foreground;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontSize":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_HighlightStyle_FontSize;
                xamlMember.Setter = set_179_HighlightStyle_FontSize;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.ContentStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_CalendarCellStyle_ContentStyle;
                xamlMember.Setter = set_180_CalendarCellStyle_ContentStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.DecorationStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "DecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_CalendarCellStyle_DecorationStyle;
                xamlMember.Setter = set_181_CalendarCellStyle_DecorationStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Items":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>");
                xamlMember.Getter = get_182_RadRadialMenu_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ChildItems":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ChildItems", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>");
                xamlMember.Getter = get_183_RadialMenuItem_ChildItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ToolTipContent":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ToolTipContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_RadialMenuItem_ToolTipContent;
                xamlMember.Setter = set_184_RadialMenuItem_ToolTipContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.CommandParameter":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_RadialMenuItem_CommandParameter;
                xamlMember.Setter = set_185_RadialMenuItem_CommandParameter;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IsEnabled":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_RadialMenuItem_IsEnabled;
                xamlMember.Setter = set_186_RadialMenuItem_IsEnabled;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Command":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_RadialMenuItem_Command;
                xamlMember.Setter = set_187_RadialMenuItem_Command;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ParentItem":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ParentItem", "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember.Getter = get_188_RadialMenuItem_ParentItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IsSelected":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_RadialMenuItem_IsSelected;
                xamlMember.Setter = set_189_RadialMenuItem_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.GroupName":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "GroupName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_RadialMenuItem_GroupName;
                xamlMember.Setter = set_190_RadialMenuItem_GroupName;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Selectable":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Selectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_RadialMenuItem_Selectable;
                xamlMember.Setter = set_191_RadialMenuItem_Selectable;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Deselectable":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Deselectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_RadialMenuItem_Deselectable;
                xamlMember.Setter = set_192_RadialMenuItem_Deselectable;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Header":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_RadialMenuItem_Header;
                xamlMember.Setter = set_193_RadialMenuItem_Header;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IconContent":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IconContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_RadialMenuItem_IconContent;
                xamlMember.Setter = set_194_RadialMenuItem_IconContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ContentSectorBackground":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ContentSectorBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_RadialMenuItem_ContentSectorBackground;
                xamlMember.Setter = set_195_RadialMenuItem_ContentSectorBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.ShowToolTip":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ShowToolTip", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_RadRadialMenu_ShowToolTip;
                xamlMember.Setter = set_196_RadRadialMenu_ShowToolTip;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.IsOpen":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_RadRadialMenu_IsOpen;
                xamlMember.Setter = set_197_RadRadialMenu_IsOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.StartAngle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_RadRadialMenu_StartAngle;
                xamlMember.Setter = set_198_RadRadialMenu_StartAngle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.InnerNavigationRadiusFactor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "InnerNavigationRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_RadRadialMenu_InnerNavigationRadiusFactor;
                xamlMember.Setter = set_199_RadRadialMenu_InnerNavigationRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.InnerRadiusFactor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "InnerRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_RadRadialMenu_InnerRadiusFactor;
                xamlMember.Setter = set_200_RadRadialMenu_InnerRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.OuterRadiusFactor":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "OuterRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_RadRadialMenu_OuterRadiusFactor;
                xamlMember.Setter = set_201_RadRadialMenu_OuterRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.ContentMenuBackgroundStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "ContentMenuBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_RadRadialMenu_ContentMenuBackgroundStyle;
                xamlMember.Setter = set_202_RadRadialMenu_ContentMenuBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.NavigationMenuBackgroundStyle":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "NavigationMenuBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_RadRadialMenu_NavigationMenuBackgroundStyle;
                xamlMember.Setter = set_203_RadRadialMenu_NavigationMenuBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.CommandService":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "CommandService", "Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService");
                xamlMember.Getter = get_204_RadRadialMenu_CommandService;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Commands":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Commands", "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>");
                xamlMember.Getter = get_205_RadRadialMenu_Commands;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>.Owner":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Owner", "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember.Getter = get_206_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.TargetElement":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "TargetElement", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_207_RadRadialMenu_TargetElement;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior.AttachTriggers":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "AttachTriggers", "Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_RadialMenuTriggerBehavior_AttachTriggers;
                xamlMember.Setter = set_208_RadialMenuTriggerBehavior_AttachTriggers;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>.Owner":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Owner", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_209_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter.Animation":
                userType = (global::NestedWorld.NestedWorld_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter");
                xamlMember = new global::NestedWorld.NestedWorld_XamlTypeInfo.XamlMember(this, "Animation", "Windows.UI.Xaml.Media.Animation.Storyboard");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_210_BusyIndicatorAnimationAdapter_Animation;
                xamlMember.Setter = set_210_BusyIndicatorAnimationAdapter_Animation;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::NestedWorld.NestedWorld_XamlTypeInfo.XamlSystemBaseType
    {
        global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::NestedWorld.NestedWorld_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

